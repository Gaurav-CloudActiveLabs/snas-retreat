# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  phoneNumber: String
  password: PasswordState
  userType: UserUserTypeType
  bookings(where: BookingWhereInput! = {}, orderBy: [BookingOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BookingWhereUniqueInput): [Booking!]
  bookingsCount(where: BookingWhereInput! = {}): Int
  reviews(where: ReviewWhereInput! = {}, orderBy: [ReviewOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ReviewWhereUniqueInput): [Review!]
  reviewsCount(where: ReviewWhereInput! = {}): Int
  verified: Boolean
  isAdmin: Boolean
  otps(where: OtpWhereInput! = {}, orderBy: [OtpOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OtpWhereUniqueInput): [Otp!]
  otpsCount(where: OtpWhereInput! = {}): Int
  updatedAt: DateTime
  createdAt: DateTime
  updatedBy: User
  createdBy: User
}

type PasswordState {
  isSet: Boolean!
}

enum UserUserTypeType {
  user
  admin
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
  phoneNumber: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  phoneNumber: StringFilter
  userType: UserUserTypeTypeNullableFilter
  bookings: BookingManyRelationFilter
  reviews: ReviewManyRelationFilter
  verified: BooleanFilter
  isAdmin: BooleanFilter
  otps: OtpManyRelationFilter
  updatedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input UserUserTypeTypeNullableFilter {
  equals: UserUserTypeType
  in: [UserUserTypeType!]
  notIn: [UserUserTypeType!]
  not: UserUserTypeTypeNullableFilter
}

input BookingManyRelationFilter {
  every: BookingWhereInput
  some: BookingWhereInput
  none: BookingWhereInput
}

input ReviewManyRelationFilter {
  every: ReviewWhereInput
  some: ReviewWhereInput
  none: ReviewWhereInput
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input OtpManyRelationFilter {
  every: OtpWhereInput
  some: OtpWhereInput
  none: OtpWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  phoneNumber: OrderDirection
  userType: OrderDirection
  verified: OrderDirection
  isAdmin: OrderDirection
  updatedAt: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  phoneNumber: String
  password: String
  userType: UserUserTypeType
  bookings: BookingRelateToManyForUpdateInput
  reviews: ReviewRelateToManyForUpdateInput
  verified: Boolean
  isAdmin: Boolean
  otps: OtpRelateToManyForUpdateInput
}

input BookingRelateToManyForUpdateInput {
  disconnect: [BookingWhereUniqueInput!]
  set: [BookingWhereUniqueInput!]
  create: [BookingCreateInput!]
  connect: [BookingWhereUniqueInput!]
}

input ReviewRelateToManyForUpdateInput {
  disconnect: [ReviewWhereUniqueInput!]
  set: [ReviewWhereUniqueInput!]
  create: [ReviewCreateInput!]
  connect: [ReviewWhereUniqueInput!]
}

input OtpRelateToManyForUpdateInput {
  disconnect: [OtpWhereUniqueInput!]
  set: [OtpWhereUniqueInput!]
  create: [OtpCreateInput!]
  connect: [OtpWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  phoneNumber: String
  password: String
  userType: UserUserTypeType
  bookings: BookingRelateToManyForCreateInput
  reviews: ReviewRelateToManyForCreateInput
  verified: Boolean
  isAdmin: Boolean
  otps: OtpRelateToManyForCreateInput
}

input BookingRelateToManyForCreateInput {
  create: [BookingCreateInput!]
  connect: [BookingWhereUniqueInput!]
}

input ReviewRelateToManyForCreateInput {
  create: [ReviewCreateInput!]
  connect: [ReviewWhereUniqueInput!]
}

input OtpRelateToManyForCreateInput {
  create: [OtpCreateInput!]
  connect: [OtpWhereUniqueInput!]
}

type Room {
  id: ID!
  roomType: RoomRoomTypeType
  roomNumber: String
  price: Float
  description: String
  isAvailable: Boolean
  bookings(where: BookingWhereInput! = {}, orderBy: [BookingOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BookingWhereUniqueInput): [Booking!]
  bookingsCount(where: BookingWhereInput! = {}): Int
  reviews(where: ReviewWhereInput! = {}, orderBy: [ReviewOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ReviewWhereUniqueInput): [Review!]
  reviewsCount(where: ReviewWhereInput! = {}): Int
  images(where: RoomImageWhereInput! = {}, orderBy: [RoomImageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: RoomImageWhereUniqueInput): [RoomImage!]
  imagesCount(where: RoomImageWhereInput! = {}): Int
  breakfastPrice: BreakfastPrice
  dinnerPrice: DinnerPrice
  numberOfAdults: Int
  numberOfChildren: Int
  updatedAt: DateTime
  createdAt: DateTime
  updatedBy: User
  createdBy: User
}

enum RoomRoomTypeType {
  Deluxe
  Premium
}

input RoomWhereUniqueInput {
  id: ID
}

input RoomWhereInput {
  AND: [RoomWhereInput!]
  OR: [RoomWhereInput!]
  NOT: [RoomWhereInput!]
  id: IDFilter
  roomType: RoomRoomTypeTypeNullableFilter
  roomNumber: StringFilter
  price: FloatFilter
  description: StringFilter
  isAvailable: BooleanFilter
  bookings: BookingManyRelationFilter
  reviews: ReviewManyRelationFilter
  images: RoomImageManyRelationFilter
  breakfastPrice: BreakfastPriceWhereInput
  dinnerPrice: DinnerPriceWhereInput
  numberOfAdults: IntNullableFilter
  numberOfChildren: IntNullableFilter
  updatedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
}

input RoomRoomTypeTypeNullableFilter {
  equals: RoomRoomTypeType
  in: [RoomRoomTypeType!]
  notIn: [RoomRoomTypeType!]
  not: RoomRoomTypeTypeNullableFilter
}

input FloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatFilter
}

input RoomImageManyRelationFilter {
  every: RoomImageWhereInput
  some: RoomImageWhereInput
  none: RoomImageWhereInput
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input RoomOrderByInput {
  id: OrderDirection
  roomType: OrderDirection
  roomNumber: OrderDirection
  price: OrderDirection
  description: OrderDirection
  isAvailable: OrderDirection
  numberOfAdults: OrderDirection
  numberOfChildren: OrderDirection
  updatedAt: OrderDirection
  createdAt: OrderDirection
}

input RoomUpdateInput {
  roomType: RoomRoomTypeType
  roomNumber: String
  price: Float
  description: String
  isAvailable: Boolean
  bookings: BookingRelateToManyForUpdateInput
  reviews: ReviewRelateToManyForUpdateInput
  images: RoomImageRelateToManyForUpdateInput
  breakfastPrice: BreakfastPriceRelateToOneForUpdateInput
  dinnerPrice: DinnerPriceRelateToOneForUpdateInput
  numberOfAdults: Int
  numberOfChildren: Int
}

input RoomImageRelateToManyForUpdateInput {
  disconnect: [RoomImageWhereUniqueInput!]
  set: [RoomImageWhereUniqueInput!]
  create: [RoomImageCreateInput!]
  connect: [RoomImageWhereUniqueInput!]
}

input BreakfastPriceRelateToOneForUpdateInput {
  create: BreakfastPriceCreateInput
  connect: BreakfastPriceWhereUniqueInput
  disconnect: Boolean
}

input DinnerPriceRelateToOneForUpdateInput {
  create: DinnerPriceCreateInput
  connect: DinnerPriceWhereUniqueInput
  disconnect: Boolean
}

input RoomUpdateArgs {
  where: RoomWhereUniqueInput!
  data: RoomUpdateInput!
}

input RoomCreateInput {
  roomType: RoomRoomTypeType
  roomNumber: String
  price: Float
  description: String
  isAvailable: Boolean
  bookings: BookingRelateToManyForCreateInput
  reviews: ReviewRelateToManyForCreateInput
  images: RoomImageRelateToManyForCreateInput
  breakfastPrice: BreakfastPriceRelateToOneForCreateInput
  dinnerPrice: DinnerPriceRelateToOneForCreateInput
  numberOfAdults: Int
  numberOfChildren: Int
}

input RoomImageRelateToManyForCreateInput {
  create: [RoomImageCreateInput!]
  connect: [RoomImageWhereUniqueInput!]
}

input BreakfastPriceRelateToOneForCreateInput {
  create: BreakfastPriceCreateInput
  connect: BreakfastPriceWhereUniqueInput
}

input DinnerPriceRelateToOneForCreateInput {
  create: DinnerPriceCreateInput
  connect: DinnerPriceWhereUniqueInput
}

type Booking {
  id: ID!
  user: User
  bookingNumber: String
  room: Room
  checkInDate: DateTime
  checkOutDate: DateTime
  totalPriceWithoutTax: Float
  totalPrice: Float
  status: String
  payment: Payment
  invoice: Invoice
  paymentStatus: String
  bookingType: String
  primaryUser: BookingPrimaryUser
  updatedAt: DateTime
  createdAt: DateTime
  updatedBy: User
  createdBy: User
}

input BookingWhereUniqueInput {
  id: ID
  bookingNumber: String
}

input BookingWhereInput {
  AND: [BookingWhereInput!]
  OR: [BookingWhereInput!]
  NOT: [BookingWhereInput!]
  id: IDFilter
  user: UserWhereInput
  bookingNumber: StringFilter
  room: RoomWhereInput
  checkInDate: DateTimeFilter
  checkOutDate: DateTimeFilter
  totalPriceWithoutTax: FloatFilter
  totalPrice: FloatFilter
  status: StringNullableFilter
  payment: PaymentWhereInput
  invoice: InvoiceWhereInput
  paymentStatus: StringNullableFilter
  bookingType: StringNullableFilter
  primaryUser: BookingPrimaryUserWhereInput
  updatedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: StringNullableFilter
}

input BookingOrderByInput {
  id: OrderDirection
  bookingNumber: OrderDirection
  checkInDate: OrderDirection
  checkOutDate: OrderDirection
  totalPriceWithoutTax: OrderDirection
  totalPrice: OrderDirection
  status: OrderDirection
  paymentStatus: OrderDirection
  bookingType: OrderDirection
  updatedAt: OrderDirection
  createdAt: OrderDirection
}

input BookingUpdateInput {
  user: UserRelateToOneForUpdateInput
  bookingNumber: String
  room: RoomRelateToOneForUpdateInput
  checkInDate: DateTime
  checkOutDate: DateTime
  totalPriceWithoutTax: Float
  totalPrice: Float
  status: String
  payment: PaymentRelateToOneForUpdateInput
  invoice: InvoiceRelateToOneForUpdateInput
  paymentStatus: String
  bookingType: String
  primaryUser: BookingPrimaryUserRelateToOneForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input RoomRelateToOneForUpdateInput {
  create: RoomCreateInput
  connect: RoomWhereUniqueInput
  disconnect: Boolean
}

input PaymentRelateToOneForUpdateInput {
  create: PaymentCreateInput
  connect: PaymentWhereUniqueInput
  disconnect: Boolean
}

input InvoiceRelateToOneForUpdateInput {
  create: InvoiceCreateInput
  connect: InvoiceWhereUniqueInput
  disconnect: Boolean
}

input BookingPrimaryUserRelateToOneForUpdateInput {
  create: BookingPrimaryUserCreateInput
  connect: BookingPrimaryUserWhereUniqueInput
  disconnect: Boolean
}

input BookingUpdateArgs {
  where: BookingWhereUniqueInput!
  data: BookingUpdateInput!
}

input BookingCreateInput {
  user: UserRelateToOneForCreateInput
  bookingNumber: String
  room: RoomRelateToOneForCreateInput
  checkInDate: DateTime
  checkOutDate: DateTime
  totalPriceWithoutTax: Float
  totalPrice: Float
  status: String
  payment: PaymentRelateToOneForCreateInput
  invoice: InvoiceRelateToOneForCreateInput
  paymentStatus: String
  bookingType: String
  primaryUser: BookingPrimaryUserRelateToOneForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input RoomRelateToOneForCreateInput {
  create: RoomCreateInput
  connect: RoomWhereUniqueInput
}

input PaymentRelateToOneForCreateInput {
  create: PaymentCreateInput
  connect: PaymentWhereUniqueInput
}

input InvoiceRelateToOneForCreateInput {
  create: InvoiceCreateInput
  connect: InvoiceWhereUniqueInput
}

input BookingPrimaryUserRelateToOneForCreateInput {
  create: BookingPrimaryUserCreateInput
  connect: BookingPrimaryUserWhereUniqueInput
}

type Payment {
  id: ID!
  booking: Booking
  paymentMethod: String
  requestId: String
  transactionId: String
  bookingNumber: String
  status: String
  amount: Float
  currency: String
  response: JSON
  user: User
  updatedAt: DateTime
  createdAt: DateTime
  updatedBy: User
  createdBy: User
}

input PaymentWhereUniqueInput {
  id: ID
}

input PaymentWhereInput {
  AND: [PaymentWhereInput!]
  OR: [PaymentWhereInput!]
  NOT: [PaymentWhereInput!]
  id: IDFilter
  booking: BookingWhereInput
  paymentMethod: StringFilter
  requestId: StringFilter
  transactionId: StringNullableFilter
  bookingNumber: StringNullableFilter
  status: StringFilter
  amount: FloatFilter
  currency: StringNullableFilter
  user: UserWhereInput
  updatedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
}

input PaymentOrderByInput {
  id: OrderDirection
  paymentMethod: OrderDirection
  requestId: OrderDirection
  transactionId: OrderDirection
  bookingNumber: OrderDirection
  status: OrderDirection
  amount: OrderDirection
  currency: OrderDirection
  updatedAt: OrderDirection
  createdAt: OrderDirection
}

input PaymentUpdateInput {
  booking: BookingRelateToOneForUpdateInput
  paymentMethod: String
  requestId: String
  transactionId: String
  bookingNumber: String
  status: String
  amount: Float
  currency: String
  response: JSON
  user: UserRelateToOneForUpdateInput
}

input BookingRelateToOneForUpdateInput {
  create: BookingCreateInput
  connect: BookingWhereUniqueInput
  disconnect: Boolean
}

input PaymentUpdateArgs {
  where: PaymentWhereUniqueInput!
  data: PaymentUpdateInput!
}

input PaymentCreateInput {
  booking: BookingRelateToOneForCreateInput
  paymentMethod: String
  requestId: String
  transactionId: String
  bookingNumber: String
  status: String
  amount: Float
  currency: String
  response: JSON
  user: UserRelateToOneForCreateInput
}

input BookingRelateToOneForCreateInput {
  create: BookingCreateInput
  connect: BookingWhereUniqueInput
}

type Review {
  id: ID!
  user: User
  room: Room
  rating: Int
  comment: String
  image: ImageFieldOutput
  updatedAt: DateTime
  createdAt: DateTime
  updatedBy: User
  createdBy: User
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

input ReviewWhereUniqueInput {
  id: ID
}

input ReviewWhereInput {
  AND: [ReviewWhereInput!]
  OR: [ReviewWhereInput!]
  NOT: [ReviewWhereInput!]
  id: IDFilter
  user: UserWhereInput
  room: RoomWhereInput
  rating: IntFilter
  comment: StringFilter
  updatedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input ReviewOrderByInput {
  id: OrderDirection
  rating: OrderDirection
  comment: OrderDirection
  updatedAt: OrderDirection
  createdAt: OrderDirection
}

input ReviewUpdateInput {
  user: UserRelateToOneForUpdateInput
  room: RoomRelateToOneForUpdateInput
  rating: Int
  comment: String
  image: ImageFieldInput
}

input ImageFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input ReviewUpdateArgs {
  where: ReviewWhereUniqueInput!
  data: ReviewUpdateInput!
}

input ReviewCreateInput {
  user: UserRelateToOneForCreateInput
  room: RoomRelateToOneForCreateInput
  rating: Int
  comment: String
  image: ImageFieldInput
}

type Slider {
  id: ID!
  image: ImageFieldOutput
  details: String
  updatedAt: DateTime
  createdAt: DateTime
  updatedBy: User
  createdBy: User
}

input SliderWhereUniqueInput {
  id: ID
}

input SliderWhereInput {
  AND: [SliderWhereInput!]
  OR: [SliderWhereInput!]
  NOT: [SliderWhereInput!]
  id: IDFilter
  details: StringFilter
  updatedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
}

input SliderOrderByInput {
  id: OrderDirection
  details: OrderDirection
  updatedAt: OrderDirection
  createdAt: OrderDirection
}

input SliderUpdateInput {
  image: ImageFieldInput
  details: String
}

input SliderUpdateArgs {
  where: SliderWhereUniqueInput!
  data: SliderUpdateInput!
}

input SliderCreateInput {
  image: ImageFieldInput
  details: String
}

type RoomImage {
  id: ID!
  image: ImageFieldOutput
  description: String
  room: Room
  updatedAt: DateTime
  createdAt: DateTime
  updatedBy: User
  createdBy: User
}

input RoomImageWhereUniqueInput {
  id: ID
}

input RoomImageWhereInput {
  AND: [RoomImageWhereInput!]
  OR: [RoomImageWhereInput!]
  NOT: [RoomImageWhereInput!]
  id: IDFilter
  description: StringFilter
  room: RoomWhereInput
  updatedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
}

input RoomImageOrderByInput {
  id: OrderDirection
  description: OrderDirection
  updatedAt: OrderDirection
  createdAt: OrderDirection
}

input RoomImageUpdateInput {
  image: ImageFieldInput
  description: String
  room: RoomRelateToOneForUpdateInput
}

input RoomImageUpdateArgs {
  where: RoomImageWhereUniqueInput!
  data: RoomImageUpdateInput!
}

input RoomImageCreateInput {
  image: ImageFieldInput
  description: String
  room: RoomRelateToOneForCreateInput
}

type Faq {
  id: ID!
  question: String
  answer: String
  updatedAt: DateTime
  createdAt: DateTime
  updatedBy: User
  createdBy: User
}

input FaqWhereUniqueInput {
  id: ID
}

input FaqWhereInput {
  AND: [FaqWhereInput!]
  OR: [FaqWhereInput!]
  NOT: [FaqWhereInput!]
  id: IDFilter
  question: StringFilter
  answer: StringFilter
  updatedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
}

input FaqOrderByInput {
  id: OrderDirection
  question: OrderDirection
  answer: OrderDirection
  updatedAt: OrderDirection
  createdAt: OrderDirection
}

input FaqUpdateInput {
  question: String
  answer: String
}

input FaqUpdateArgs {
  where: FaqWhereUniqueInput!
  data: FaqUpdateInput!
}

input FaqCreateInput {
  question: String
  answer: String
}

type Invoice {
  id: ID!
  booking: Booking
  invoiceNumber: String
  amount: Float
  taxDetails: String
  updatedAt: DateTime
  createdAt: DateTime
  updatedBy: User
  createdBy: User
}

input InvoiceWhereUniqueInput {
  id: ID
  invoiceNumber: String
}

input InvoiceWhereInput {
  AND: [InvoiceWhereInput!]
  OR: [InvoiceWhereInput!]
  NOT: [InvoiceWhereInput!]
  id: IDFilter
  booking: BookingWhereInput
  invoiceNumber: StringFilter
  amount: FloatFilter
  taxDetails: StringFilter
  updatedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
}

input InvoiceOrderByInput {
  id: OrderDirection
  invoiceNumber: OrderDirection
  amount: OrderDirection
  taxDetails: OrderDirection
  updatedAt: OrderDirection
  createdAt: OrderDirection
}

input InvoiceUpdateInput {
  booking: BookingRelateToOneForUpdateInput
  invoiceNumber: String
  amount: Float
  taxDetails: String
}

input InvoiceUpdateArgs {
  where: InvoiceWhereUniqueInput!
  data: InvoiceUpdateInput!
}

input InvoiceCreateInput {
  booking: BookingRelateToOneForCreateInput
  invoiceNumber: String
  amount: Float
  taxDetails: String
}

type BreakfastPrice {
  id: ID!
  rooms(where: RoomWhereInput! = {}, orderBy: [RoomOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: RoomWhereUniqueInput): [Room!]
  roomsCount(where: RoomWhereInput! = {}): Int
  price: Float
  updatedAt: DateTime
  createdAt: DateTime
  updatedBy: User
  createdBy: User
}

input BreakfastPriceWhereUniqueInput {
  id: ID
}

input BreakfastPriceWhereInput {
  AND: [BreakfastPriceWhereInput!]
  OR: [BreakfastPriceWhereInput!]
  NOT: [BreakfastPriceWhereInput!]
  id: IDFilter
  rooms: RoomManyRelationFilter
  price: FloatFilter
  updatedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
}

input RoomManyRelationFilter {
  every: RoomWhereInput
  some: RoomWhereInput
  none: RoomWhereInput
}

input BreakfastPriceOrderByInput {
  id: OrderDirection
  price: OrderDirection
  updatedAt: OrderDirection
  createdAt: OrderDirection
}

input BreakfastPriceUpdateInput {
  rooms: RoomRelateToManyForUpdateInput
  price: Float
}

input RoomRelateToManyForUpdateInput {
  disconnect: [RoomWhereUniqueInput!]
  set: [RoomWhereUniqueInput!]
  create: [RoomCreateInput!]
  connect: [RoomWhereUniqueInput!]
}

input BreakfastPriceUpdateArgs {
  where: BreakfastPriceWhereUniqueInput!
  data: BreakfastPriceUpdateInput!
}

input BreakfastPriceCreateInput {
  rooms: RoomRelateToManyForCreateInput
  price: Float
}

input RoomRelateToManyForCreateInput {
  create: [RoomCreateInput!]
  connect: [RoomWhereUniqueInput!]
}

type DinnerPrice {
  id: ID!
  rooms(where: RoomWhereInput! = {}, orderBy: [RoomOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: RoomWhereUniqueInput): [Room!]
  roomsCount(where: RoomWhereInput! = {}): Int
  price: Float
  updatedAt: DateTime
  createdAt: DateTime
  updatedBy: User
  createdBy: User
}

input DinnerPriceWhereUniqueInput {
  id: ID
}

input DinnerPriceWhereInput {
  AND: [DinnerPriceWhereInput!]
  OR: [DinnerPriceWhereInput!]
  NOT: [DinnerPriceWhereInput!]
  id: IDFilter
  rooms: RoomManyRelationFilter
  price: FloatFilter
  updatedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
}

input DinnerPriceOrderByInput {
  id: OrderDirection
  price: OrderDirection
  updatedAt: OrderDirection
  createdAt: OrderDirection
}

input DinnerPriceUpdateInput {
  rooms: RoomRelateToManyForUpdateInput
  price: Float
}

input DinnerPriceUpdateArgs {
  where: DinnerPriceWhereUniqueInput!
  data: DinnerPriceUpdateInput!
}

input DinnerPriceCreateInput {
  rooms: RoomRelateToManyForCreateInput
  price: Float
}

type ReportList {
  id: ID!
  type: String
  data: JSON
  updatedAt: DateTime
  createdAt: DateTime
  updatedBy: User
  createdBy: User
}

input ReportListWhereUniqueInput {
  id: ID
}

input ReportListWhereInput {
  AND: [ReportListWhereInput!]
  OR: [ReportListWhereInput!]
  NOT: [ReportListWhereInput!]
  id: IDFilter
  type: StringNullableFilter
  updatedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
}

input ReportListOrderByInput {
  id: OrderDirection
  type: OrderDirection
  updatedAt: OrderDirection
  createdAt: OrderDirection
}

input ReportListUpdateInput {
  type: String
  data: JSON
}

input ReportListUpdateArgs {
  where: ReportListWhereUniqueInput!
  data: ReportListUpdateInput!
}

input ReportListCreateInput {
  type: String
  data: JSON
}

type Coupon {
  id: ID!
  code: String
  type: String
  value: Float
  isUsed: Boolean
  expirationDate: DateTime
  updatedAt: DateTime
  createdAt: DateTime
  updatedBy: User
  createdBy: User
}

input CouponWhereUniqueInput {
  id: ID
  code: String
}

input CouponWhereInput {
  AND: [CouponWhereInput!]
  OR: [CouponWhereInput!]
  NOT: [CouponWhereInput!]
  id: IDFilter
  code: StringFilter
  type: StringNullableFilter
  value: FloatFilter
  isUsed: BooleanFilter
  expirationDate: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
}

input CouponOrderByInput {
  id: OrderDirection
  code: OrderDirection
  type: OrderDirection
  value: OrderDirection
  isUsed: OrderDirection
  expirationDate: OrderDirection
  updatedAt: OrderDirection
  createdAt: OrderDirection
}

input CouponUpdateInput {
  code: String
  type: String
  value: Float
  isUsed: Boolean
  expirationDate: DateTime
}

input CouponUpdateArgs {
  where: CouponWhereUniqueInput!
  data: CouponUpdateInput!
}

input CouponCreateInput {
  code: String
  type: String
  value: Float
  isUsed: Boolean
  expirationDate: DateTime
}

type BookingPrimaryUser {
  id: ID!
  name: String
  age: Int
  primaryUserGender: String
  verificationIdType: String
  verificationId: String
  bookingType: String
  address: String
  companyName: String
  companyAddress: String
  gstNumber: String
  booking: Booking
  updatedAt: DateTime
  createdAt: DateTime
  updatedBy: User
  createdBy: User
}

input BookingPrimaryUserWhereUniqueInput {
  id: ID
}

input BookingPrimaryUserWhereInput {
  AND: [BookingPrimaryUserWhereInput!]
  OR: [BookingPrimaryUserWhereInput!]
  NOT: [BookingPrimaryUserWhereInput!]
  id: IDFilter
  name: StringFilter
  age: IntNullableFilter
  primaryUserGender: StringNullableFilter
  verificationIdType: StringNullableFilter
  verificationId: StringFilter
  bookingType: StringNullableFilter
  address: StringFilter
  companyName: StringFilter
  companyAddress: StringFilter
  gstNumber: StringFilter
  booking: BookingWhereInput
  updatedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
}

input BookingPrimaryUserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  age: OrderDirection
  primaryUserGender: OrderDirection
  verificationIdType: OrderDirection
  verificationId: OrderDirection
  bookingType: OrderDirection
  address: OrderDirection
  companyName: OrderDirection
  companyAddress: OrderDirection
  gstNumber: OrderDirection
  updatedAt: OrderDirection
  createdAt: OrderDirection
}

input BookingPrimaryUserUpdateInput {
  name: String
  age: Int
  primaryUserGender: String
  verificationIdType: String
  verificationId: String
  bookingType: String
  address: String
  companyName: String
  companyAddress: String
  gstNumber: String
  booking: BookingRelateToOneForUpdateInput
}

input BookingPrimaryUserUpdateArgs {
  where: BookingPrimaryUserWhereUniqueInput!
  data: BookingPrimaryUserUpdateInput!
}

input BookingPrimaryUserCreateInput {
  name: String
  age: Int
  primaryUserGender: String
  verificationIdType: String
  verificationId: String
  bookingType: String
  address: String
  companyName: String
  companyAddress: String
  gstNumber: String
  booking: BookingRelateToOneForCreateInput
}

type Otp {
  id: ID!
  otp: String
  user: User
  updatedAt: DateTime
  createdAt: DateTime
  updatedBy: User
  createdBy: User
}

input OtpWhereUniqueInput {
  id: ID
}

input OtpWhereInput {
  AND: [OtpWhereInput!]
  OR: [OtpWhereInput!]
  NOT: [OtpWhereInput!]
  id: IDFilter
  otp: StringFilter
  user: UserWhereInput
  updatedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
}

input OtpOrderByInput {
  id: OrderDirection
  otp: OrderDirection
  updatedAt: OrderDirection
  createdAt: OrderDirection
}

input OtpUpdateInput {
  otp: String
  user: UserRelateToOneForUpdateInput
}

input OtpUpdateArgs {
  where: OtpWhereUniqueInput!
  data: OtpUpdateInput!
}

input OtpCreateInput {
  otp: String
  user: UserRelateToOneForCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createRoom(data: RoomCreateInput!): Room
  createRooms(data: [RoomCreateInput!]!): [Room]
  updateRoom(where: RoomWhereUniqueInput!, data: RoomUpdateInput!): Room
  updateRooms(data: [RoomUpdateArgs!]!): [Room]
  deleteRoom(where: RoomWhereUniqueInput!): Room
  deleteRooms(where: [RoomWhereUniqueInput!]!): [Room]
  createBooking(data: BookingCreateInput!): Booking
  createBookings(data: [BookingCreateInput!]!): [Booking]
  updateBooking(where: BookingWhereUniqueInput!, data: BookingUpdateInput!): Booking
  updateBookings(data: [BookingUpdateArgs!]!): [Booking]
  deleteBooking(where: BookingWhereUniqueInput!): Booking
  deleteBookings(where: [BookingWhereUniqueInput!]!): [Booking]
  createPayment(data: PaymentCreateInput!): Payment
  createPayments(data: [PaymentCreateInput!]!): [Payment]
  updatePayment(where: PaymentWhereUniqueInput!, data: PaymentUpdateInput!): Payment
  updatePayments(data: [PaymentUpdateArgs!]!): [Payment]
  deletePayment(where: PaymentWhereUniqueInput!): Payment
  deletePayments(where: [PaymentWhereUniqueInput!]!): [Payment]
  createReview(data: ReviewCreateInput!): Review
  createReviews(data: [ReviewCreateInput!]!): [Review]
  updateReview(where: ReviewWhereUniqueInput!, data: ReviewUpdateInput!): Review
  updateReviews(data: [ReviewUpdateArgs!]!): [Review]
  deleteReview(where: ReviewWhereUniqueInput!): Review
  deleteReviews(where: [ReviewWhereUniqueInput!]!): [Review]
  createSlider(data: SliderCreateInput!): Slider
  createSliders(data: [SliderCreateInput!]!): [Slider]
  updateSlider(where: SliderWhereUniqueInput!, data: SliderUpdateInput!): Slider
  updateSliders(data: [SliderUpdateArgs!]!): [Slider]
  deleteSlider(where: SliderWhereUniqueInput!): Slider
  deleteSliders(where: [SliderWhereUniqueInput!]!): [Slider]
  createRoomImage(data: RoomImageCreateInput!): RoomImage
  createRoomImages(data: [RoomImageCreateInput!]!): [RoomImage]
  updateRoomImage(where: RoomImageWhereUniqueInput!, data: RoomImageUpdateInput!): RoomImage
  updateRoomImages(data: [RoomImageUpdateArgs!]!): [RoomImage]
  deleteRoomImage(where: RoomImageWhereUniqueInput!): RoomImage
  deleteRoomImages(where: [RoomImageWhereUniqueInput!]!): [RoomImage]
  createFaq(data: FaqCreateInput!): Faq
  createFaqs(data: [FaqCreateInput!]!): [Faq]
  updateFaq(where: FaqWhereUniqueInput!, data: FaqUpdateInput!): Faq
  updateFaqs(data: [FaqUpdateArgs!]!): [Faq]
  deleteFaq(where: FaqWhereUniqueInput!): Faq
  deleteFaqs(where: [FaqWhereUniqueInput!]!): [Faq]
  createInvoice(data: InvoiceCreateInput!): Invoice
  createInvoices(data: [InvoiceCreateInput!]!): [Invoice]
  updateInvoice(where: InvoiceWhereUniqueInput!, data: InvoiceUpdateInput!): Invoice
  updateInvoices(data: [InvoiceUpdateArgs!]!): [Invoice]
  deleteInvoice(where: InvoiceWhereUniqueInput!): Invoice
  deleteInvoices(where: [InvoiceWhereUniqueInput!]!): [Invoice]
  createBreakfastPrice(data: BreakfastPriceCreateInput!): BreakfastPrice
  createBreakfastPrices(data: [BreakfastPriceCreateInput!]!): [BreakfastPrice]
  updateBreakfastPrice(where: BreakfastPriceWhereUniqueInput!, data: BreakfastPriceUpdateInput!): BreakfastPrice
  updateBreakfastPrices(data: [BreakfastPriceUpdateArgs!]!): [BreakfastPrice]
  deleteBreakfastPrice(where: BreakfastPriceWhereUniqueInput!): BreakfastPrice
  deleteBreakfastPrices(where: [BreakfastPriceWhereUniqueInput!]!): [BreakfastPrice]
  createDinnerPrice(data: DinnerPriceCreateInput!): DinnerPrice
  createDinnerPrices(data: [DinnerPriceCreateInput!]!): [DinnerPrice]
  updateDinnerPrice(where: DinnerPriceWhereUniqueInput!, data: DinnerPriceUpdateInput!): DinnerPrice
  updateDinnerPrices(data: [DinnerPriceUpdateArgs!]!): [DinnerPrice]
  deleteDinnerPrice(where: DinnerPriceWhereUniqueInput!): DinnerPrice
  deleteDinnerPrices(where: [DinnerPriceWhereUniqueInput!]!): [DinnerPrice]
  createReportList(data: ReportListCreateInput!): ReportList
  createReportLists(data: [ReportListCreateInput!]!): [ReportList]
  updateReportList(where: ReportListWhereUniqueInput!, data: ReportListUpdateInput!): ReportList
  updateReportLists(data: [ReportListUpdateArgs!]!): [ReportList]
  deleteReportList(where: ReportListWhereUniqueInput!): ReportList
  deleteReportLists(where: [ReportListWhereUniqueInput!]!): [ReportList]
  createCoupon(data: CouponCreateInput!): Coupon
  createCoupons(data: [CouponCreateInput!]!): [Coupon]
  updateCoupon(where: CouponWhereUniqueInput!, data: CouponUpdateInput!): Coupon
  updateCoupons(data: [CouponUpdateArgs!]!): [Coupon]
  deleteCoupon(where: CouponWhereUniqueInput!): Coupon
  deleteCoupons(where: [CouponWhereUniqueInput!]!): [Coupon]
  createBookingPrimaryUser(data: BookingPrimaryUserCreateInput!): BookingPrimaryUser
  createBookingPrimaryUsers(data: [BookingPrimaryUserCreateInput!]!): [BookingPrimaryUser]
  updateBookingPrimaryUser(where: BookingPrimaryUserWhereUniqueInput!, data: BookingPrimaryUserUpdateInput!): BookingPrimaryUser
  updateBookingPrimaryUsers(data: [BookingPrimaryUserUpdateArgs!]!): [BookingPrimaryUser]
  deleteBookingPrimaryUser(where: BookingPrimaryUserWhereUniqueInput!): BookingPrimaryUser
  deleteBookingPrimaryUsers(where: [BookingPrimaryUserWhereUniqueInput!]!): [BookingPrimaryUser]
  createOtp(data: OtpCreateInput!): Otp
  createOtps(data: [OtpCreateInput!]!): [Otp]
  updateOtp(where: OtpWhereUniqueInput!, data: OtpUpdateInput!): Otp
  updateOtps(data: [OtpUpdateArgs!]!): [Otp]
  deleteOtp(where: OtpWhereUniqueInput!): Otp
  deleteOtps(where: [OtpWhereUniqueInput!]!): [Otp]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
  bookingPayment(bookingId: String!, userId: String!): bookingPaymentsType
  registerUser(email: String!): registerUserMassage
  updateBookingPayment(requestId: String, bookingId: String, paymentId: String, signature: String, paymentError: JSON): bookingPaymentsType
  verifyOtp(email: String!, otp: String!): verifyOtpMessage
  resendOtp(email: String!): resendOtpMessage
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  room(where: RoomWhereUniqueInput!): Room
  rooms(where: RoomWhereInput! = {}, orderBy: [RoomOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: RoomWhereUniqueInput): [Room!]
  roomsCount(where: RoomWhereInput! = {}): Int
  booking(where: BookingWhereUniqueInput!): Booking
  bookings(where: BookingWhereInput! = {}, orderBy: [BookingOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BookingWhereUniqueInput): [Booking!]
  bookingsCount(where: BookingWhereInput! = {}): Int
  payment(where: PaymentWhereUniqueInput!): Payment
  payments(where: PaymentWhereInput! = {}, orderBy: [PaymentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PaymentWhereUniqueInput): [Payment!]
  paymentsCount(where: PaymentWhereInput! = {}): Int
  review(where: ReviewWhereUniqueInput!): Review
  reviews(where: ReviewWhereInput! = {}, orderBy: [ReviewOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ReviewWhereUniqueInput): [Review!]
  reviewsCount(where: ReviewWhereInput! = {}): Int
  slider(where: SliderWhereUniqueInput!): Slider
  sliders(where: SliderWhereInput! = {}, orderBy: [SliderOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SliderWhereUniqueInput): [Slider!]
  slidersCount(where: SliderWhereInput! = {}): Int
  roomImage(where: RoomImageWhereUniqueInput!): RoomImage
  roomImages(where: RoomImageWhereInput! = {}, orderBy: [RoomImageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: RoomImageWhereUniqueInput): [RoomImage!]
  roomImagesCount(where: RoomImageWhereInput! = {}): Int
  faq(where: FaqWhereUniqueInput!): Faq
  faqs(where: FaqWhereInput! = {}, orderBy: [FaqOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FaqWhereUniqueInput): [Faq!]
  faqsCount(where: FaqWhereInput! = {}): Int
  invoice(where: InvoiceWhereUniqueInput!): Invoice
  invoices(where: InvoiceWhereInput! = {}, orderBy: [InvoiceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: InvoiceWhereUniqueInput): [Invoice!]
  invoicesCount(where: InvoiceWhereInput! = {}): Int
  breakfastPrice(where: BreakfastPriceWhereUniqueInput!): BreakfastPrice
  breakfastPrices(where: BreakfastPriceWhereInput! = {}, orderBy: [BreakfastPriceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BreakfastPriceWhereUniqueInput): [BreakfastPrice!]
  breakfastPricesCount(where: BreakfastPriceWhereInput! = {}): Int
  dinnerPrice(where: DinnerPriceWhereUniqueInput!): DinnerPrice
  dinnerPrices(where: DinnerPriceWhereInput! = {}, orderBy: [DinnerPriceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: DinnerPriceWhereUniqueInput): [DinnerPrice!]
  dinnerPricesCount(where: DinnerPriceWhereInput! = {}): Int
  reportList(where: ReportListWhereUniqueInput!): ReportList
  reportLists(where: ReportListWhereInput! = {}, orderBy: [ReportListOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ReportListWhereUniqueInput): [ReportList!]
  reportListsCount(where: ReportListWhereInput! = {}): Int
  coupon(where: CouponWhereUniqueInput!): Coupon
  coupons(where: CouponWhereInput! = {}, orderBy: [CouponOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CouponWhereUniqueInput): [Coupon!]
  couponsCount(where: CouponWhereInput! = {}): Int
  bookingPrimaryUser(where: BookingPrimaryUserWhereUniqueInput!): BookingPrimaryUser
  bookingPrimaryUsers(where: BookingPrimaryUserWhereInput! = {}, orderBy: [BookingPrimaryUserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BookingPrimaryUserWhereUniqueInput): [BookingPrimaryUser!]
  bookingPrimaryUsersCount(where: BookingPrimaryUserWhereInput! = {}): Int
  otp(where: OtpWhereUniqueInput!): Otp
  otps(where: OtpWhereInput! = {}, orderBy: [OtpOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OtpWhereUniqueInput): [Otp!]
  otpsCount(where: OtpWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}

type bookingPaymentsType {
  message: String!
  payment: Payment
}

type registerUserMassage {
  message: String
  result: String
  type: String
  userID: String
  request_id: String
}

type resendOtpMessage {
  message: String
  type: String
}

type verifyOtpMessage {
  message: String
  result: String
  user: User!
  token: String!
}
