# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  firstName: String
  lastName: String
  isLastNamePublic: Boolean
  email: String
  isEmailPublic: Boolean
  followers(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  followersCount(where: UserWhereInput! = {}): Int
  following(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  followingCount(where: UserWhereInput! = {}): Int
  password: PasswordState
  enrollments(where: EnrollmentWhereInput! = {}, orderBy: [EnrollmentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EnrollmentWhereUniqueInput): [Enrollment!]
  enrollmentsCount(where: EnrollmentWhereInput! = {}): Int
  comments(where: CommentWhereInput! = {}, orderBy: [CommentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CommentWhereUniqueInput): [Comment!]
  commentsCount(where: CommentWhereInput! = {}): Int
  pronoun: String
  isPronounPublic: Boolean
  dob: DateTime
  isDobPublic: Boolean
  contactInfo: JSON
  isContactPublic: Boolean
  interests: JSON
  isInterestsPublic: Boolean
  employmentStatus: String
  isEmploymentStatusPublic: Boolean
  socialFields: JSON
  theme: String
  pushNotificationSettings: PushNotificationSetting
  referralCode: String
  referrals(where: ReferralWhereInput! = {}, orderBy: [ReferralOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ReferralWhereUniqueInput): [Referral!]
  referralsCount(where: ReferralWhereInput! = {}): Int
  messagesSent(where: MessageWhereInput! = {}, orderBy: [MessageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MessageWhereUniqueInput): [Message!]
  messagesSentCount(where: MessageWhereInput! = {}): Int
  chatMembers(where: ChatMemberWhereInput! = {}, orderBy: [ChatMemberOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ChatMemberWhereUniqueInput): [ChatMember!]
  chatMembersCount(where: ChatMemberWhereInput! = {}): Int
  isAdmin: Boolean
  verified: Boolean
  shadowBanned: Boolean
  groups(where: GroupMemberWhereInput! = {}, orderBy: [GroupMemberOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: GroupMemberWhereUniqueInput): [GroupMember!]
  groupsCount(where: GroupMemberWhereInput! = {}): Int
  groupManaged(where: GroupWhereInput! = {}, orderBy: [GroupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: GroupWhereUniqueInput): [Group!]
  groupManagedCount(where: GroupWhereInput! = {}): Int
  joinRequests(where: JoinRequestWhereInput! = {}, orderBy: [JoinRequestOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: JoinRequestWhereUniqueInput): [JoinRequest!]
  joinRequestsCount(where: JoinRequestWhereInput! = {}): Int
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  community: Community
  isProfileCompleted: Boolean
  likes(where: LikeWhereInput! = {}, orderBy: [LikeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LikeWhereUniqueInput): [Like!]
  likesCount(where: LikeWhereInput! = {}): Int
  notifications(where: NotificationWhereInput! = {}, orderBy: [NotificationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: NotificationWhereUniqueInput): [Notification!]
  notificationsCount(where: NotificationWhereInput! = {}): Int
  userType: String
  ageRange: String
  phone: String
  heardAboutApp: String
  housingSupport: String
  isHousingSupportPublic: Boolean
  foodClothingSupport: String
  educationStatus: String
  isEducationStatusPublic: Boolean
  collegeUniversity: String
  isCollegeUniversityPublic: Boolean
  companyName: String
  isCompanyNamePublic: Boolean
  zipCode: String
  isZipCodePublic: Boolean
  favoriteColor: String
  isFavoriteColorPublic: Boolean
  aboutYourself: String
  isAboutYourselfPublic: Boolean
  refererDetails: User
  isRefererPublic: Boolean
  assistance: String
  birthMonth: String
  isBirthMonthPublic: Boolean
  updatedAt: DateTime
  createdAt: DateTime
  updatedBy: User
  createdBy: User
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  firstName: StringFilter
  lastName: StringFilter
  isLastNamePublic: BooleanFilter
  email: StringFilter
  isEmailPublic: BooleanFilter
  followers: UserManyRelationFilter
  following: UserManyRelationFilter
  enrollments: EnrollmentManyRelationFilter
  comments: CommentManyRelationFilter
  pronoun: StringFilter
  isPronounPublic: BooleanFilter
  dob: DateTimeNullableFilter
  isDobPublic: BooleanFilter
  isContactPublic: BooleanFilter
  isInterestsPublic: BooleanFilter
  employmentStatus: StringFilter
  isEmploymentStatusPublic: BooleanFilter
  theme: StringNullableFilter
  pushNotificationSettings: PushNotificationSettingWhereInput
  referralCode: StringFilter
  referrals: ReferralManyRelationFilter
  messagesSent: MessageManyRelationFilter
  chatMembers: ChatMemberManyRelationFilter
  isAdmin: BooleanFilter
  verified: BooleanFilter
  shadowBanned: BooleanFilter
  groups: GroupMemberManyRelationFilter
  groupManaged: GroupManyRelationFilter
  joinRequests: JoinRequestManyRelationFilter
  posts: PostManyRelationFilter
  community: CommunityWhereInput
  isProfileCompleted: BooleanFilter
  likes: LikeManyRelationFilter
  notifications: NotificationManyRelationFilter
  userType: StringNullableFilter
  ageRange: StringFilter
  phone: StringFilter
  heardAboutApp: StringFilter
  housingSupport: StringNullableFilter
  isHousingSupportPublic: BooleanFilter
  foodClothingSupport: StringNullableFilter
  educationStatus: StringNullableFilter
  isEducationStatusPublic: BooleanFilter
  collegeUniversity: StringFilter
  isCollegeUniversityPublic: BooleanFilter
  companyName: StringFilter
  isCompanyNamePublic: BooleanFilter
  zipCode: StringFilter
  isZipCodePublic: BooleanFilter
  favoriteColor: StringFilter
  isFavoriteColorPublic: BooleanFilter
  aboutYourself: StringFilter
  isAboutYourselfPublic: BooleanFilter
  refererDetails: UserWhereInput
  isRefererPublic: BooleanFilter
  assistance: StringNullableFilter
  birthMonth: StringNullableFilter
  isBirthMonthPublic: BooleanFilter
  updatedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input EnrollmentManyRelationFilter {
  every: EnrollmentWhereInput
  some: EnrollmentWhereInput
  none: EnrollmentWhereInput
}

input CommentManyRelationFilter {
  every: CommentWhereInput
  some: CommentWhereInput
  none: CommentWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: StringNullableFilter
}

input ReferralManyRelationFilter {
  every: ReferralWhereInput
  some: ReferralWhereInput
  none: ReferralWhereInput
}

input MessageManyRelationFilter {
  every: MessageWhereInput
  some: MessageWhereInput
  none: MessageWhereInput
}

input ChatMemberManyRelationFilter {
  every: ChatMemberWhereInput
  some: ChatMemberWhereInput
  none: ChatMemberWhereInput
}

input GroupMemberManyRelationFilter {
  every: GroupMemberWhereInput
  some: GroupMemberWhereInput
  none: GroupMemberWhereInput
}

input GroupManyRelationFilter {
  every: GroupWhereInput
  some: GroupWhereInput
  none: GroupWhereInput
}

input JoinRequestManyRelationFilter {
  every: JoinRequestWhereInput
  some: JoinRequestWhereInput
  none: JoinRequestWhereInput
}

input PostManyRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input LikeManyRelationFilter {
  every: LikeWhereInput
  some: LikeWhereInput
  none: LikeWhereInput
}

input NotificationManyRelationFilter {
  every: NotificationWhereInput
  some: NotificationWhereInput
  none: NotificationWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  firstName: OrderDirection
  lastName: OrderDirection
  isLastNamePublic: OrderDirection
  email: OrderDirection
  isEmailPublic: OrderDirection
  pronoun: OrderDirection
  isPronounPublic: OrderDirection
  dob: OrderDirection
  isDobPublic: OrderDirection
  isContactPublic: OrderDirection
  isInterestsPublic: OrderDirection
  employmentStatus: OrderDirection
  isEmploymentStatusPublic: OrderDirection
  theme: OrderDirection
  referralCode: OrderDirection
  isAdmin: OrderDirection
  verified: OrderDirection
  shadowBanned: OrderDirection
  isProfileCompleted: OrderDirection
  userType: OrderDirection
  ageRange: OrderDirection
  phone: OrderDirection
  heardAboutApp: OrderDirection
  housingSupport: OrderDirection
  isHousingSupportPublic: OrderDirection
  foodClothingSupport: OrderDirection
  educationStatus: OrderDirection
  isEducationStatusPublic: OrderDirection
  collegeUniversity: OrderDirection
  isCollegeUniversityPublic: OrderDirection
  companyName: OrderDirection
  isCompanyNamePublic: OrderDirection
  zipCode: OrderDirection
  isZipCodePublic: OrderDirection
  favoriteColor: OrderDirection
  isFavoriteColorPublic: OrderDirection
  aboutYourself: OrderDirection
  isAboutYourselfPublic: OrderDirection
  isRefererPublic: OrderDirection
  assistance: OrderDirection
  birthMonth: OrderDirection
  isBirthMonthPublic: OrderDirection
  updatedAt: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  firstName: String
  lastName: String
  isLastNamePublic: Boolean
  email: String
  isEmailPublic: Boolean
  followers: UserRelateToManyForUpdateInput
  following: UserRelateToManyForUpdateInput
  password: String
  enrollments: EnrollmentRelateToManyForUpdateInput
  comments: CommentRelateToManyForUpdateInput
  pronoun: String
  isPronounPublic: Boolean
  dob: DateTime
  isDobPublic: Boolean
  contactInfo: JSON
  isContactPublic: Boolean
  interests: JSON
  isInterestsPublic: Boolean
  employmentStatus: String
  isEmploymentStatusPublic: Boolean
  socialFields: JSON
  theme: String
  pushNotificationSettings: PushNotificationSettingRelateToOneForUpdateInput
  referralCode: String
  referrals: ReferralRelateToManyForUpdateInput
  messagesSent: MessageRelateToManyForUpdateInput
  chatMembers: ChatMemberRelateToManyForUpdateInput
  isAdmin: Boolean
  verified: Boolean
  shadowBanned: Boolean
  groups: GroupMemberRelateToManyForUpdateInput
  groupManaged: GroupRelateToManyForUpdateInput
  joinRequests: JoinRequestRelateToManyForUpdateInput
  posts: PostRelateToManyForUpdateInput
  community: CommunityRelateToOneForUpdateInput
  isProfileCompleted: Boolean
  likes: LikeRelateToManyForUpdateInput
  notifications: NotificationRelateToManyForUpdateInput
  userType: String
  ageRange: String
  phone: String
  heardAboutApp: String
  housingSupport: String
  isHousingSupportPublic: Boolean
  foodClothingSupport: String
  educationStatus: String
  isEducationStatusPublic: Boolean
  collegeUniversity: String
  isCollegeUniversityPublic: Boolean
  companyName: String
  isCompanyNamePublic: Boolean
  zipCode: String
  isZipCodePublic: Boolean
  favoriteColor: String
  isFavoriteColorPublic: Boolean
  aboutYourself: String
  isAboutYourselfPublic: Boolean
  refererDetails: UserRelateToOneForUpdateInput
  isRefererPublic: Boolean
  assistance: String
  birthMonth: String
  isBirthMonthPublic: Boolean
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input EnrollmentRelateToManyForUpdateInput {
  disconnect: [EnrollmentWhereUniqueInput!]
  set: [EnrollmentWhereUniqueInput!]
  create: [EnrollmentCreateInput!]
  connect: [EnrollmentWhereUniqueInput!]
}

input CommentRelateToManyForUpdateInput {
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  create: [CommentCreateInput!]
  connect: [CommentWhereUniqueInput!]
}

input PushNotificationSettingRelateToOneForUpdateInput {
  create: PushNotificationSettingCreateInput
  connect: PushNotificationSettingWhereUniqueInput
  disconnect: Boolean
}

input ReferralRelateToManyForUpdateInput {
  disconnect: [ReferralWhereUniqueInput!]
  set: [ReferralWhereUniqueInput!]
  create: [ReferralCreateInput!]
  connect: [ReferralWhereUniqueInput!]
}

input MessageRelateToManyForUpdateInput {
  disconnect: [MessageWhereUniqueInput!]
  set: [MessageWhereUniqueInput!]
  create: [MessageCreateInput!]
  connect: [MessageWhereUniqueInput!]
}

input ChatMemberRelateToManyForUpdateInput {
  disconnect: [ChatMemberWhereUniqueInput!]
  set: [ChatMemberWhereUniqueInput!]
  create: [ChatMemberCreateInput!]
  connect: [ChatMemberWhereUniqueInput!]
}

input GroupMemberRelateToManyForUpdateInput {
  disconnect: [GroupMemberWhereUniqueInput!]
  set: [GroupMemberWhereUniqueInput!]
  create: [GroupMemberCreateInput!]
  connect: [GroupMemberWhereUniqueInput!]
}

input GroupRelateToManyForUpdateInput {
  disconnect: [GroupWhereUniqueInput!]
  set: [GroupWhereUniqueInput!]
  create: [GroupCreateInput!]
  connect: [GroupWhereUniqueInput!]
}

input JoinRequestRelateToManyForUpdateInput {
  disconnect: [JoinRequestWhereUniqueInput!]
  set: [JoinRequestWhereUniqueInput!]
  create: [JoinRequestCreateInput!]
  connect: [JoinRequestWhereUniqueInput!]
}

input PostRelateToManyForUpdateInput {
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input CommunityRelateToOneForUpdateInput {
  create: CommunityCreateInput
  connect: CommunityWhereUniqueInput
  disconnect: Boolean
}

input LikeRelateToManyForUpdateInput {
  disconnect: [LikeWhereUniqueInput!]
  set: [LikeWhereUniqueInput!]
  create: [LikeCreateInput!]
  connect: [LikeWhereUniqueInput!]
}

input NotificationRelateToManyForUpdateInput {
  disconnect: [NotificationWhereUniqueInput!]
  set: [NotificationWhereUniqueInput!]
  create: [NotificationCreateInput!]
  connect: [NotificationWhereUniqueInput!]
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  firstName: String
  lastName: String
  isLastNamePublic: Boolean
  email: String
  isEmailPublic: Boolean
  followers: UserRelateToManyForCreateInput
  following: UserRelateToManyForCreateInput
  password: String
  enrollments: EnrollmentRelateToManyForCreateInput
  comments: CommentRelateToManyForCreateInput
  pronoun: String
  isPronounPublic: Boolean
  dob: DateTime
  isDobPublic: Boolean
  contactInfo: JSON
  isContactPublic: Boolean
  interests: JSON
  isInterestsPublic: Boolean
  employmentStatus: String
  isEmploymentStatusPublic: Boolean
  socialFields: JSON
  theme: String
  pushNotificationSettings: PushNotificationSettingRelateToOneForCreateInput
  referralCode: String
  referrals: ReferralRelateToManyForCreateInput
  messagesSent: MessageRelateToManyForCreateInput
  chatMembers: ChatMemberRelateToManyForCreateInput
  isAdmin: Boolean
  verified: Boolean
  shadowBanned: Boolean
  groups: GroupMemberRelateToManyForCreateInput
  groupManaged: GroupRelateToManyForCreateInput
  joinRequests: JoinRequestRelateToManyForCreateInput
  posts: PostRelateToManyForCreateInput
  community: CommunityRelateToOneForCreateInput
  isProfileCompleted: Boolean
  likes: LikeRelateToManyForCreateInput
  notifications: NotificationRelateToManyForCreateInput
  userType: String
  ageRange: String
  phone: String
  heardAboutApp: String
  housingSupport: String
  isHousingSupportPublic: Boolean
  foodClothingSupport: String
  educationStatus: String
  isEducationStatusPublic: Boolean
  collegeUniversity: String
  isCollegeUniversityPublic: Boolean
  companyName: String
  isCompanyNamePublic: Boolean
  zipCode: String
  isZipCodePublic: Boolean
  favoriteColor: String
  isFavoriteColorPublic: Boolean
  aboutYourself: String
  isAboutYourselfPublic: Boolean
  refererDetails: UserRelateToOneForCreateInput
  isRefererPublic: Boolean
  assistance: String
  birthMonth: String
  isBirthMonthPublic: Boolean
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input EnrollmentRelateToManyForCreateInput {
  create: [EnrollmentCreateInput!]
  connect: [EnrollmentWhereUniqueInput!]
}

input CommentRelateToManyForCreateInput {
  create: [CommentCreateInput!]
  connect: [CommentWhereUniqueInput!]
}

input PushNotificationSettingRelateToOneForCreateInput {
  create: PushNotificationSettingCreateInput
  connect: PushNotificationSettingWhereUniqueInput
}

input ReferralRelateToManyForCreateInput {
  create: [ReferralCreateInput!]
  connect: [ReferralWhereUniqueInput!]
}

input MessageRelateToManyForCreateInput {
  create: [MessageCreateInput!]
  connect: [MessageWhereUniqueInput!]
}

input ChatMemberRelateToManyForCreateInput {
  create: [ChatMemberCreateInput!]
  connect: [ChatMemberWhereUniqueInput!]
}

input GroupMemberRelateToManyForCreateInput {
  create: [GroupMemberCreateInput!]
  connect: [GroupMemberWhereUniqueInput!]
}

input GroupRelateToManyForCreateInput {
  create: [GroupCreateInput!]
  connect: [GroupWhereUniqueInput!]
}

input JoinRequestRelateToManyForCreateInput {
  create: [JoinRequestCreateInput!]
  connect: [JoinRequestWhereUniqueInput!]
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input CommunityRelateToOneForCreateInput {
  create: CommunityCreateInput
  connect: CommunityWhereUniqueInput
}

input LikeRelateToManyForCreateInput {
  create: [LikeCreateInput!]
  connect: [LikeWhereUniqueInput!]
}

input NotificationRelateToManyForCreateInput {
  create: [NotificationCreateInput!]
  connect: [NotificationWhereUniqueInput!]
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type Post {
  id: ID!
  title: String
  group: Group
  likes(where: LikeWhereInput! = {}, orderBy: [LikeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LikeWhereUniqueInput): [Like!]
  likesCount(where: LikeWhereInput! = {}): Int
  content: Post_content_Document
  author: User
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  isFlagged: Boolean
  publishedAt: DateTime
  visibility: String
  comments(where: CommentWhereInput! = {}, orderBy: [CommentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CommentWhereUniqueInput): [Comment!]
  commentsCount(where: CommentWhereInput! = {}): Int
  community: Community
  updatedAt: DateTime
  createdAt: DateTime
  updatedBy: User
  createdBy: User
}

type Post_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input PostWhereUniqueInput {
  id: ID
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  title: StringFilter
  group: GroupWhereInput
  likes: LikeManyRelationFilter
  author: UserWhereInput
  tags: TagManyRelationFilter
  isFlagged: BooleanFilter
  publishedAt: DateTimeNullableFilter
  visibility: StringNullableFilter
  comments: CommentManyRelationFilter
  community: CommunityWhereInput
  updatedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
  isFlagged: OrderDirection
  publishedAt: OrderDirection
  visibility: OrderDirection
  updatedAt: OrderDirection
  createdAt: OrderDirection
}

input PostUpdateInput {
  title: String
  group: GroupRelateToOneForUpdateInput
  likes: LikeRelateToManyForUpdateInput
  content: JSON
  author: UserRelateToOneForUpdateInput
  tags: TagRelateToManyForUpdateInput
  isFlagged: Boolean
  publishedAt: DateTime
  visibility: String
  comments: CommentRelateToManyForUpdateInput
  community: CommunityRelateToOneForUpdateInput
}

input GroupRelateToOneForUpdateInput {
  create: GroupCreateInput
  connect: GroupWhereUniqueInput
  disconnect: Boolean
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  title: String
  group: GroupRelateToOneForCreateInput
  likes: LikeRelateToManyForCreateInput
  content: JSON
  author: UserRelateToOneForCreateInput
  tags: TagRelateToManyForCreateInput
  isFlagged: Boolean
  publishedAt: DateTime
  visibility: String
  comments: CommentRelateToManyForCreateInput
  community: CommunityRelateToOneForCreateInput
}

input GroupRelateToOneForCreateInput {
  create: GroupCreateInput
  connect: GroupWhereUniqueInput
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

type Tag {
  id: ID!
  name: String
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  updatedAt: DateTime
  createdAt: DateTime
  updatedBy: User
  createdBy: User
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  posts: PostManyRelationFilter
  updatedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
  updatedAt: OrderDirection
  createdAt: OrderDirection
}

input TagUpdateInput {
  name: String
  posts: PostRelateToManyForUpdateInput
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  posts: PostRelateToManyForCreateInput
}

type Like {
  id: ID!
  post: Post
  createdAt: DateTime
  user: User
  updatedAt: DateTime
  updatedBy: User
  createdBy: User
}

input LikeWhereUniqueInput {
  id: ID
}

input LikeWhereInput {
  AND: [LikeWhereInput!]
  OR: [LikeWhereInput!]
  NOT: [LikeWhereInput!]
  id: IDFilter
  post: PostWhereInput
  createdAt: DateTimeNullableFilter
  user: UserWhereInput
  updatedAt: DateTimeNullableFilter
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
}

input LikeOrderByInput {
  id: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input LikeUpdateInput {
  post: PostRelateToOneForUpdateInput
  user: UserRelateToOneForUpdateInput
}

input PostRelateToOneForUpdateInput {
  create: PostCreateInput
  connect: PostWhereUniqueInput
  disconnect: Boolean
}

input LikeUpdateArgs {
  where: LikeWhereUniqueInput!
  data: LikeUpdateInput!
}

input LikeCreateInput {
  post: PostRelateToOneForCreateInput
  user: UserRelateToOneForCreateInput
}

input PostRelateToOneForCreateInput {
  create: PostCreateInput
  connect: PostWhereUniqueInput
}

type Group {
  id: ID!
  name: String
  visibility: String
  admins(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  adminsCount(where: UserWhereInput! = {}): Int
  members(where: GroupMemberWhereInput! = {}, orderBy: [GroupMemberOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: GroupMemberWhereUniqueInput): [GroupMember!]
  membersCount(where: GroupMemberWhereInput! = {}): Int
  joinRequests(where: JoinRequestWhereInput! = {}, orderBy: [JoinRequestOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: JoinRequestWhereUniqueInput): [JoinRequest!]
  joinRequestsCount(where: JoinRequestWhereInput! = {}): Int
  location: String
  category: Category
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  events(where: EventWhereInput! = {}, orderBy: [EventOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EventWhereUniqueInput): [Event!]
  eventsCount(where: EventWhereInput! = {}): Int
  bannerImage: String
  type: String
  metadata: JSON
  isFeatured: String
  updatedAt: DateTime
  createdAt: DateTime
  updatedBy: User
  createdBy: User
}

input GroupWhereUniqueInput {
  id: ID
}

input GroupWhereInput {
  AND: [GroupWhereInput!]
  OR: [GroupWhereInput!]
  NOT: [GroupWhereInput!]
  id: IDFilter
  name: StringFilter
  visibility: StringFilter
  admins: UserManyRelationFilter
  members: GroupMemberManyRelationFilter
  joinRequests: JoinRequestManyRelationFilter
  location: StringFilter
  category: CategoryWhereInput
  posts: PostManyRelationFilter
  events: EventManyRelationFilter
  bannerImage: StringFilter
  type: StringNullableFilter
  isFeatured: StringNullableFilter
  updatedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
}

input EventManyRelationFilter {
  every: EventWhereInput
  some: EventWhereInput
  none: EventWhereInput
}

input GroupOrderByInput {
  id: OrderDirection
  name: OrderDirection
  visibility: OrderDirection
  location: OrderDirection
  bannerImage: OrderDirection
  type: OrderDirection
  isFeatured: OrderDirection
  updatedAt: OrderDirection
  createdAt: OrderDirection
}

input GroupUpdateInput {
  name: String
  visibility: String
  admins: UserRelateToManyForUpdateInput
  members: GroupMemberRelateToManyForUpdateInput
  joinRequests: JoinRequestRelateToManyForUpdateInput
  location: String
  category: CategoryRelateToOneForUpdateInput
  posts: PostRelateToManyForUpdateInput
  events: EventRelateToManyForUpdateInput
  bannerImage: String
  type: String
  metadata: JSON
  isFeatured: String
}

input CategoryRelateToOneForUpdateInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
  disconnect: Boolean
}

input EventRelateToManyForUpdateInput {
  disconnect: [EventWhereUniqueInput!]
  set: [EventWhereUniqueInput!]
  create: [EventCreateInput!]
  connect: [EventWhereUniqueInput!]
}

input GroupUpdateArgs {
  where: GroupWhereUniqueInput!
  data: GroupUpdateInput!
}

input GroupCreateInput {
  name: String
  visibility: String
  admins: UserRelateToManyForCreateInput
  members: GroupMemberRelateToManyForCreateInput
  joinRequests: JoinRequestRelateToManyForCreateInput
  location: String
  category: CategoryRelateToOneForCreateInput
  posts: PostRelateToManyForCreateInput
  events: EventRelateToManyForCreateInput
  bannerImage: String
  type: String
  metadata: JSON
  isFeatured: String
}

input CategoryRelateToOneForCreateInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
}

input EventRelateToManyForCreateInput {
  create: [EventCreateInput!]
  connect: [EventWhereUniqueInput!]
}

type Notification {
  id: ID!
  user: User
  content: String
  type: String
  sent: Boolean
  expiryDate: DateTime
  isFlagged: Boolean
  updatedAt: DateTime
  createdAt: DateTime
  updatedBy: User
  createdBy: User
}

input NotificationWhereUniqueInput {
  id: ID
}

input NotificationWhereInput {
  AND: [NotificationWhereInput!]
  OR: [NotificationWhereInput!]
  NOT: [NotificationWhereInput!]
  id: IDFilter
  user: UserWhereInput
  content: StringFilter
  type: StringNullableFilter
  sent: BooleanFilter
  expiryDate: DateTimeNullableFilter
  isFlagged: BooleanFilter
  updatedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
}

input NotificationOrderByInput {
  id: OrderDirection
  content: OrderDirection
  type: OrderDirection
  sent: OrderDirection
  expiryDate: OrderDirection
  isFlagged: OrderDirection
  updatedAt: OrderDirection
  createdAt: OrderDirection
}

input NotificationUpdateInput {
  user: UserRelateToOneForUpdateInput
  content: String
  type: String
  sent: Boolean
  expiryDate: DateTime
  isFlagged: Boolean
}

input NotificationUpdateArgs {
  where: NotificationWhereUniqueInput!
  data: NotificationUpdateInput!
}

input NotificationCreateInput {
  user: UserRelateToOneForCreateInput
  content: String
  type: String
  sent: Boolean
  expiryDate: DateTime
  isFlagged: Boolean
}

type Category {
  id: ID!
  name: String
  subCategory(where: SubCategoryWhereInput! = {}, orderBy: [SubCategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SubCategoryWhereUniqueInput): [SubCategory!]
  subCategoryCount(where: SubCategoryWhereInput! = {}): Int
  groups(where: GroupWhereInput! = {}, orderBy: [GroupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: GroupWhereUniqueInput): [Group!]
  groupsCount(where: GroupWhereInput! = {}): Int
  videoResources(where: VideoResourceWhereInput! = {}, orderBy: [VideoResourceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: VideoResourceWhereUniqueInput): [VideoResource!]
  videoResourcesCount(where: VideoResourceWhereInput! = {}): Int
  description: String
  image: String
  metadata: JSON
  updatedAt: DateTime
  createdAt: DateTime
  updatedBy: User
  createdBy: User
}

input CategoryWhereUniqueInput {
  id: ID
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  id: IDFilter
  name: StringFilter
  subCategory: SubCategoryManyRelationFilter
  groups: GroupManyRelationFilter
  videoResources: VideoResourceManyRelationFilter
  description: StringFilter
  image: StringFilter
  updatedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
}

input SubCategoryManyRelationFilter {
  every: SubCategoryWhereInput
  some: SubCategoryWhereInput
  none: SubCategoryWhereInput
}

input VideoResourceManyRelationFilter {
  every: VideoResourceWhereInput
  some: VideoResourceWhereInput
  none: VideoResourceWhereInput
}

input CategoryOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  image: OrderDirection
  updatedAt: OrderDirection
  createdAt: OrderDirection
}

input CategoryUpdateInput {
  name: String
  subCategory: SubCategoryRelateToManyForUpdateInput
  groups: GroupRelateToManyForUpdateInput
  videoResources: VideoResourceRelateToManyForUpdateInput
  description: String
  image: String
  metadata: JSON
}

input SubCategoryRelateToManyForUpdateInput {
  disconnect: [SubCategoryWhereUniqueInput!]
  set: [SubCategoryWhereUniqueInput!]
  create: [SubCategoryCreateInput!]
  connect: [SubCategoryWhereUniqueInput!]
}

input VideoResourceRelateToManyForUpdateInput {
  disconnect: [VideoResourceWhereUniqueInput!]
  set: [VideoResourceWhereUniqueInput!]
  create: [VideoResourceCreateInput!]
  connect: [VideoResourceWhereUniqueInput!]
}

input CategoryUpdateArgs {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateInput!
}

input CategoryCreateInput {
  name: String
  subCategory: SubCategoryRelateToManyForCreateInput
  groups: GroupRelateToManyForCreateInput
  videoResources: VideoResourceRelateToManyForCreateInput
  description: String
  image: String
  metadata: JSON
}

input SubCategoryRelateToManyForCreateInput {
  create: [SubCategoryCreateInput!]
  connect: [SubCategoryWhereUniqueInput!]
}

input VideoResourceRelateToManyForCreateInput {
  create: [VideoResourceCreateInput!]
  connect: [VideoResourceWhereUniqueInput!]
}

type Event {
  id: ID!
  name: String
  description: String
  location: String
  eventDate: DateTime
  group: Group
  bannerImage: String
  type: String
  acceptedUsers(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  acceptedUsersCount(where: UserWhereInput! = {}): Int
  isOnline: Boolean
  community: Community
  updatedAt: DateTime
  createdAt: DateTime
  updatedBy: User
  createdBy: User
}

input EventWhereUniqueInput {
  id: ID
}

input EventWhereInput {
  AND: [EventWhereInput!]
  OR: [EventWhereInput!]
  NOT: [EventWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  location: StringFilter
  eventDate: DateTimeNullableFilter
  group: GroupWhereInput
  bannerImage: StringFilter
  type: StringFilter
  acceptedUsers: UserManyRelationFilter
  isOnline: BooleanFilter
  community: CommunityWhereInput
  updatedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
}

input EventOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  location: OrderDirection
  eventDate: OrderDirection
  bannerImage: OrderDirection
  type: OrderDirection
  isOnline: OrderDirection
  updatedAt: OrderDirection
  createdAt: OrderDirection
}

input EventUpdateInput {
  name: String
  description: String
  location: String
  eventDate: DateTime
  group: GroupRelateToOneForUpdateInput
  bannerImage: String
  type: String
  acceptedUsers: UserRelateToManyForUpdateInput
  isOnline: Boolean
  community: CommunityRelateToOneForUpdateInput
}

input EventUpdateArgs {
  where: EventWhereUniqueInput!
  data: EventUpdateInput!
}

input EventCreateInput {
  name: String
  description: String
  location: String
  eventDate: DateTime
  group: GroupRelateToOneForCreateInput
  bannerImage: String
  type: String
  acceptedUsers: UserRelateToManyForCreateInput
  isOnline: Boolean
  community: CommunityRelateToOneForCreateInput
}

type VideoResource {
  id: ID!
  title: String
  url: String
  category: Category
  courses: Course
  image: String
  bgColor: String
  textColor: String
  updatedAt: DateTime
  createdAt: DateTime
  updatedBy: User
  createdBy: User
}

input VideoResourceWhereUniqueInput {
  id: ID
}

input VideoResourceWhereInput {
  AND: [VideoResourceWhereInput!]
  OR: [VideoResourceWhereInput!]
  NOT: [VideoResourceWhereInput!]
  id: IDFilter
  title: StringFilter
  url: StringFilter
  category: CategoryWhereInput
  courses: CourseWhereInput
  image: StringFilter
  updatedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
}

input VideoResourceOrderByInput {
  id: OrderDirection
  title: OrderDirection
  url: OrderDirection
  image: OrderDirection
  bgColor: OrderDirection
  textColor: OrderDirection
  updatedAt: OrderDirection
  createdAt: OrderDirection
}

input VideoResourceUpdateInput {
  title: String
  url: String
  category: CategoryRelateToOneForUpdateInput
  courses: CourseRelateToOneForUpdateInput
  image: String
  bgColor: String
  textColor: String
}

input CourseRelateToOneForUpdateInput {
  create: CourseCreateInput
  connect: CourseWhereUniqueInput
  disconnect: Boolean
}

input VideoResourceUpdateArgs {
  where: VideoResourceWhereUniqueInput!
  data: VideoResourceUpdateInput!
}

input VideoResourceCreateInput {
  title: String
  url: String
  category: CategoryRelateToOneForCreateInput
  courses: CourseRelateToOneForCreateInput
  image: String
  bgColor: String
  textColor: String
}

input CourseRelateToOneForCreateInput {
  create: CourseCreateInput
  connect: CourseWhereUniqueInput
}

type PostSchedule {
  id: ID!
  content: String
  frequency: String
  groups(where: GroupWhereInput! = {}, orderBy: [GroupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: GroupWhereUniqueInput): [Group!]
  groupsCount(where: GroupWhereInput! = {}): Int
  post: Post
  hashtags: JSON
  scheduledDate: DateTime
  status: String
  updatedAt: DateTime
  createdAt: DateTime
  updatedBy: User
  createdBy: User
}

input PostScheduleWhereUniqueInput {
  id: ID
}

input PostScheduleWhereInput {
  AND: [PostScheduleWhereInput!]
  OR: [PostScheduleWhereInput!]
  NOT: [PostScheduleWhereInput!]
  id: IDFilter
  content: StringFilter
  frequency: StringNullableFilter
  groups: GroupManyRelationFilter
  post: PostWhereInput
  scheduledDate: DateTimeNullableFilter
  status: StringNullableFilter
  updatedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
}

input PostScheduleOrderByInput {
  id: OrderDirection
  content: OrderDirection
  frequency: OrderDirection
  scheduledDate: OrderDirection
  status: OrderDirection
  updatedAt: OrderDirection
  createdAt: OrderDirection
}

input PostScheduleUpdateInput {
  content: String
  frequency: String
  groups: GroupRelateToManyForUpdateInput
  post: PostRelateToOneForUpdateInput
  hashtags: JSON
  scheduledDate: DateTime
  status: String
}

input PostScheduleUpdateArgs {
  where: PostScheduleWhereUniqueInput!
  data: PostScheduleUpdateInput!
}

input PostScheduleCreateInput {
  content: String
  frequency: String
  groups: GroupRelateToManyForCreateInput
  post: PostRelateToOneForCreateInput
  hashtags: JSON
  scheduledDate: DateTime
  status: String
}

type QA {
  id: ID!
  question: String
  user: User
  staff: User
  answeredAt: DateTime
  updatedAt: DateTime
  createdAt: DateTime
  updatedBy: User
  createdBy: User
}

input QAWhereUniqueInput {
  id: ID
}

input QAWhereInput {
  AND: [QAWhereInput!]
  OR: [QAWhereInput!]
  NOT: [QAWhereInput!]
  id: IDFilter
  question: StringFilter
  user: UserWhereInput
  staff: UserWhereInput
  answeredAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
}

input QAOrderByInput {
  id: OrderDirection
  question: OrderDirection
  answeredAt: OrderDirection
  updatedAt: OrderDirection
  createdAt: OrderDirection
}

input QAUpdateInput {
  question: String
  user: UserRelateToOneForUpdateInput
  staff: UserRelateToOneForUpdateInput
  answeredAt: DateTime
}

input QAUpdateArgs {
  where: QAWhereUniqueInput!
  data: QAUpdateInput!
}

input QACreateInput {
  question: String
  user: UserRelateToOneForCreateInput
  staff: UserRelateToOneForCreateInput
  answeredAt: DateTime
}

type GroupMember {
  id: ID!
  user: User
  group: Group
  joinedAt: DateTime
  updatedAt: DateTime
  createdAt: DateTime
  updatedBy: User
  createdBy: User
}

input GroupMemberWhereUniqueInput {
  id: ID
}

input GroupMemberWhereInput {
  AND: [GroupMemberWhereInput!]
  OR: [GroupMemberWhereInput!]
  NOT: [GroupMemberWhereInput!]
  id: IDFilter
  user: UserWhereInput
  group: GroupWhereInput
  joinedAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
}

input GroupMemberOrderByInput {
  id: OrderDirection
  joinedAt: OrderDirection
  updatedAt: OrderDirection
  createdAt: OrderDirection
}

input GroupMemberUpdateInput {
  user: UserRelateToOneForUpdateInput
  group: GroupRelateToOneForUpdateInput
  joinedAt: DateTime
}

input GroupMemberUpdateArgs {
  where: GroupMemberWhereUniqueInput!
  data: GroupMemberUpdateInput!
}

input GroupMemberCreateInput {
  user: UserRelateToOneForCreateInput
  group: GroupRelateToOneForCreateInput
  joinedAt: DateTime
}

type Survey {
  id: ID!
  question: String
  type: String
  choices: JSON
  group: Group
  closedAt: DateTime
  updatedAt: DateTime
  createdAt: DateTime
  updatedBy: User
  createdBy: User
}

input SurveyWhereUniqueInput {
  id: ID
}

input SurveyWhereInput {
  AND: [SurveyWhereInput!]
  OR: [SurveyWhereInput!]
  NOT: [SurveyWhereInput!]
  id: IDFilter
  question: StringFilter
  type: StringNullableFilter
  group: GroupWhereInput
  closedAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
}

input SurveyOrderByInput {
  id: OrderDirection
  question: OrderDirection
  type: OrderDirection
  closedAt: OrderDirection
  updatedAt: OrderDirection
  createdAt: OrderDirection
}

input SurveyUpdateInput {
  question: String
  type: String
  choices: JSON
  group: GroupRelateToOneForUpdateInput
  closedAt: DateTime
}

input SurveyUpdateArgs {
  where: SurveyWhereUniqueInput!
  data: SurveyUpdateInput!
}

input SurveyCreateInput {
  question: String
  type: String
  choices: JSON
  group: GroupRelateToOneForCreateInput
  closedAt: DateTime
}

type Announcement {
  id: ID!
  title: String
  content: String
  expiryDate: DateTime
  notificationSent: Boolean
  image: String
  type: String
  description: String
  updatedAt: DateTime
  createdAt: DateTime
  updatedBy: User
  createdBy: User
}

input AnnouncementWhereUniqueInput {
  id: ID
}

input AnnouncementWhereInput {
  AND: [AnnouncementWhereInput!]
  OR: [AnnouncementWhereInput!]
  NOT: [AnnouncementWhereInput!]
  id: IDFilter
  title: StringFilter
  content: StringFilter
  expiryDate: DateTimeNullableFilter
  notificationSent: BooleanFilter
  image: StringFilter
  type: StringFilter
  description: StringFilter
  updatedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
}

input AnnouncementOrderByInput {
  id: OrderDirection
  title: OrderDirection
  content: OrderDirection
  expiryDate: OrderDirection
  notificationSent: OrderDirection
  image: OrderDirection
  type: OrderDirection
  description: OrderDirection
  updatedAt: OrderDirection
  createdAt: OrderDirection
}

input AnnouncementUpdateInput {
  title: String
  content: String
  expiryDate: DateTime
  notificationSent: Boolean
  image: String
  type: String
  description: String
}

input AnnouncementUpdateArgs {
  where: AnnouncementWhereUniqueInput!
  data: AnnouncementUpdateInput!
}

input AnnouncementCreateInput {
  title: String
  content: String
  expiryDate: DateTime
  notificationSent: Boolean
  image: String
  type: String
  description: String
}

type PrivacyAndTerm {
  id: ID!
  privacy: String
  terms: String
  updatedAt: DateTime
  createdAt: DateTime
  updatedBy: User
  createdBy: User
}

input PrivacyAndTermWhereUniqueInput {
  id: ID
}

input PrivacyAndTermWhereInput {
  AND: [PrivacyAndTermWhereInput!]
  OR: [PrivacyAndTermWhereInput!]
  NOT: [PrivacyAndTermWhereInput!]
  id: IDFilter
  privacy: StringFilter
  terms: StringFilter
  updatedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
}

input PrivacyAndTermOrderByInput {
  id: OrderDirection
  privacy: OrderDirection
  terms: OrderDirection
  updatedAt: OrderDirection
  createdAt: OrderDirection
}

input PrivacyAndTermUpdateInput {
  privacy: String
  terms: String
}

input PrivacyAndTermUpdateArgs {
  where: PrivacyAndTermWhereUniqueInput!
  data: PrivacyAndTermUpdateInput!
}

input PrivacyAndTermCreateInput {
  privacy: String
  terms: String
}

type Comment {
  id: ID!
  content: String
  user: User
  post: Post
  isFlagged: Boolean
  parentComment: Comment
  replies(where: CommentWhereInput! = {}, orderBy: [CommentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CommentWhereUniqueInput): [Comment!]
  repliesCount(where: CommentWhereInput! = {}): Int
  isEdited: Boolean
  isReported: Boolean
  updatedAt: DateTime
  createdAt: DateTime
  updatedBy: User
  createdBy: User
}

input CommentWhereUniqueInput {
  id: ID
}

input CommentWhereInput {
  AND: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
  id: IDFilter
  content: StringFilter
  user: UserWhereInput
  post: PostWhereInput
  isFlagged: BooleanFilter
  parentComment: CommentWhereInput
  replies: CommentManyRelationFilter
  isEdited: BooleanFilter
  isReported: BooleanFilter
  updatedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
}

input CommentOrderByInput {
  id: OrderDirection
  content: OrderDirection
  isFlagged: OrderDirection
  isEdited: OrderDirection
  isReported: OrderDirection
  updatedAt: OrderDirection
  createdAt: OrderDirection
}

input CommentUpdateInput {
  content: String
  user: UserRelateToOneForUpdateInput
  post: PostRelateToOneForUpdateInput
  isFlagged: Boolean
  parentComment: CommentRelateToOneForUpdateInput
  replies: CommentRelateToManyForUpdateInput
  isEdited: Boolean
  isReported: Boolean
}

input CommentRelateToOneForUpdateInput {
  create: CommentCreateInput
  connect: CommentWhereUniqueInput
  disconnect: Boolean
}

input CommentUpdateArgs {
  where: CommentWhereUniqueInput!
  data: CommentUpdateInput!
}

input CommentCreateInput {
  content: String
  user: UserRelateToOneForCreateInput
  post: PostRelateToOneForCreateInput
  isFlagged: Boolean
  parentComment: CommentRelateToOneForCreateInput
  replies: CommentRelateToManyForCreateInput
  isEdited: Boolean
  isReported: Boolean
}

input CommentRelateToOneForCreateInput {
  create: CommentCreateInput
  connect: CommentWhereUniqueInput
}

type LearningSet {
  id: ID!
  title: String
  course: Course
  image: String
  banner: String
  bgColor: String
  textColor: String
  updatedAt: DateTime
  createdAt: DateTime
  updatedBy: User
  createdBy: User
}

input LearningSetWhereUniqueInput {
  id: ID
}

input LearningSetWhereInput {
  AND: [LearningSetWhereInput!]
  OR: [LearningSetWhereInput!]
  NOT: [LearningSetWhereInput!]
  id: IDFilter
  title: StringFilter
  course: CourseWhereInput
  image: StringFilter
  banner: StringFilter
  updatedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
}

input LearningSetOrderByInput {
  id: OrderDirection
  title: OrderDirection
  image: OrderDirection
  banner: OrderDirection
  bgColor: OrderDirection
  textColor: OrderDirection
  updatedAt: OrderDirection
  createdAt: OrderDirection
}

input LearningSetUpdateInput {
  title: String
  course: CourseRelateToOneForUpdateInput
  image: String
  banner: String
  bgColor: String
  textColor: String
}

input LearningSetUpdateArgs {
  where: LearningSetWhereUniqueInput!
  data: LearningSetUpdateInput!
}

input LearningSetCreateInput {
  title: String
  course: CourseRelateToOneForCreateInput
  image: String
  banner: String
  bgColor: String
  textColor: String
}

type Course {
  id: ID!
  title: String
  description: String
  learningSets(where: LearningSetWhereInput! = {}, orderBy: [LearningSetOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LearningSetWhereUniqueInput): [LearningSet!]
  learningSetsCount(where: LearningSetWhereInput! = {}): Int
  videoResources(where: VideoResourceWhereInput! = {}, orderBy: [VideoResourceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: VideoResourceWhereUniqueInput): [VideoResource!]
  videoResourcesCount(where: VideoResourceWhereInput! = {}): Int
  lessons(where: LessonWhereInput! = {}, orderBy: [LessonOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LessonWhereUniqueInput): [Lesson!]
  lessonsCount(where: LessonWhereInput! = {}): Int
  enrollments(where: EnrollmentWhereInput! = {}, orderBy: [EnrollmentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EnrollmentWhereUniqueInput): [Enrollment!]
  enrollmentsCount(where: EnrollmentWhereInput! = {}): Int
  status: String
  updatedAt: DateTime
  createdAt: DateTime
  updatedBy: User
  createdBy: User
}

input CourseWhereUniqueInput {
  id: ID
}

input CourseWhereInput {
  AND: [CourseWhereInput!]
  OR: [CourseWhereInput!]
  NOT: [CourseWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  learningSets: LearningSetManyRelationFilter
  videoResources: VideoResourceManyRelationFilter
  lessons: LessonManyRelationFilter
  enrollments: EnrollmentManyRelationFilter
  status: StringNullableFilter
  updatedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
}

input LearningSetManyRelationFilter {
  every: LearningSetWhereInput
  some: LearningSetWhereInput
  none: LearningSetWhereInput
}

input LessonManyRelationFilter {
  every: LessonWhereInput
  some: LessonWhereInput
  none: LessonWhereInput
}

input CourseOrderByInput {
  id: OrderDirection
  title: OrderDirection
  description: OrderDirection
  status: OrderDirection
  updatedAt: OrderDirection
  createdAt: OrderDirection
}

input CourseUpdateInput {
  title: String
  description: String
  learningSets: LearningSetRelateToManyForUpdateInput
  videoResources: VideoResourceRelateToManyForUpdateInput
  lessons: LessonRelateToManyForUpdateInput
  enrollments: EnrollmentRelateToManyForUpdateInput
  status: String
}

input LearningSetRelateToManyForUpdateInput {
  disconnect: [LearningSetWhereUniqueInput!]
  set: [LearningSetWhereUniqueInput!]
  create: [LearningSetCreateInput!]
  connect: [LearningSetWhereUniqueInput!]
}

input LessonRelateToManyForUpdateInput {
  disconnect: [LessonWhereUniqueInput!]
  set: [LessonWhereUniqueInput!]
  create: [LessonCreateInput!]
  connect: [LessonWhereUniqueInput!]
}

input CourseUpdateArgs {
  where: CourseWhereUniqueInput!
  data: CourseUpdateInput!
}

input CourseCreateInput {
  title: String
  description: String
  learningSets: LearningSetRelateToManyForCreateInput
  videoResources: VideoResourceRelateToManyForCreateInput
  lessons: LessonRelateToManyForCreateInput
  enrollments: EnrollmentRelateToManyForCreateInput
  status: String
}

input LearningSetRelateToManyForCreateInput {
  create: [LearningSetCreateInput!]
  connect: [LearningSetWhereUniqueInput!]
}

input LessonRelateToManyForCreateInput {
  create: [LessonCreateInput!]
  connect: [LessonWhereUniqueInput!]
}

type Lesson {
  id: ID!
  title: String
  contentType: String
  courses(where: CourseWhereInput! = {}, orderBy: [CourseOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CourseWhereUniqueInput): [Course!]
  coursesCount(where: CourseWhereInput! = {}): Int
  video: String
  status: LessonProgress
}

input LessonWhereUniqueInput {
  id: ID
}

input LessonWhereInput {
  AND: [LessonWhereInput!]
  OR: [LessonWhereInput!]
  NOT: [LessonWhereInput!]
  id: IDFilter
  title: StringFilter
  contentType: StringNullableFilter
  courses: CourseManyRelationFilter
  video: StringFilter
  status: LessonProgressWhereInput
}

input CourseManyRelationFilter {
  every: CourseWhereInput
  some: CourseWhereInput
  none: CourseWhereInput
}

input LessonOrderByInput {
  id: OrderDirection
  title: OrderDirection
  contentType: OrderDirection
  video: OrderDirection
}

input LessonUpdateInput {
  title: String
  contentType: String
  courses: CourseRelateToManyForUpdateInput
  video: String
  status: LessonProgressRelateToOneForUpdateInput
}

input CourseRelateToManyForUpdateInput {
  disconnect: [CourseWhereUniqueInput!]
  set: [CourseWhereUniqueInput!]
  create: [CourseCreateInput!]
  connect: [CourseWhereUniqueInput!]
}

input LessonProgressRelateToOneForUpdateInput {
  create: LessonProgressCreateInput
  connect: LessonProgressWhereUniqueInput
  disconnect: Boolean
}

input LessonUpdateArgs {
  where: LessonWhereUniqueInput!
  data: LessonUpdateInput!
}

input LessonCreateInput {
  title: String
  contentType: String
  courses: CourseRelateToManyForCreateInput
  video: String
  status: LessonProgressRelateToOneForCreateInput
}

input CourseRelateToManyForCreateInput {
  create: [CourseCreateInput!]
  connect: [CourseWhereUniqueInput!]
}

input LessonProgressRelateToOneForCreateInput {
  create: LessonProgressCreateInput
  connect: LessonProgressWhereUniqueInput
}

type LessonProgress {
  id: ID!
  lesson: Lesson
  enrollment: Enrollment
  completed: Boolean
  updatedAt: DateTime
  createdAt: DateTime
  updatedBy: User
  createdBy: User
}

input LessonProgressWhereUniqueInput {
  id: ID
}

input LessonProgressWhereInput {
  AND: [LessonProgressWhereInput!]
  OR: [LessonProgressWhereInput!]
  NOT: [LessonProgressWhereInput!]
  id: IDFilter
  lesson: LessonWhereInput
  enrollment: EnrollmentWhereInput
  completed: BooleanFilter
  updatedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
}

input LessonProgressOrderByInput {
  id: OrderDirection
  completed: OrderDirection
  updatedAt: OrderDirection
  createdAt: OrderDirection
}

input LessonProgressUpdateInput {
  lesson: LessonRelateToOneForUpdateInput
  enrollment: EnrollmentRelateToOneForUpdateInput
  completed: Boolean
}

input LessonRelateToOneForUpdateInput {
  create: LessonCreateInput
  connect: LessonWhereUniqueInput
  disconnect: Boolean
}

input EnrollmentRelateToOneForUpdateInput {
  create: EnrollmentCreateInput
  connect: EnrollmentWhereUniqueInput
  disconnect: Boolean
}

input LessonProgressUpdateArgs {
  where: LessonProgressWhereUniqueInput!
  data: LessonProgressUpdateInput!
}

input LessonProgressCreateInput {
  lesson: LessonRelateToOneForCreateInput
  enrollment: EnrollmentRelateToOneForCreateInput
  completed: Boolean
}

input LessonRelateToOneForCreateInput {
  create: LessonCreateInput
  connect: LessonWhereUniqueInput
}

input EnrollmentRelateToOneForCreateInput {
  create: EnrollmentCreateInput
  connect: EnrollmentWhereUniqueInput
}

type Enrollment {
  id: ID!
  user: User
  course: Course
  enrollmentDate: DateTime
  status: String
  progress: String
  lessonProgress(where: LessonProgressWhereInput! = {}, orderBy: [LessonProgressOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LessonProgressWhereUniqueInput): [LessonProgress!]
  lessonProgressCount(where: LessonProgressWhereInput! = {}): Int
  updatedAt: DateTime
  createdAt: DateTime
  updatedBy: User
  createdBy: User
}

input EnrollmentWhereUniqueInput {
  id: ID
}

input EnrollmentWhereInput {
  AND: [EnrollmentWhereInput!]
  OR: [EnrollmentWhereInput!]
  NOT: [EnrollmentWhereInput!]
  id: IDFilter
  user: UserWhereInput
  course: CourseWhereInput
  enrollmentDate: DateTimeNullableFilter
  status: StringNullableFilter
  progress: StringNullableFilter
  lessonProgress: LessonProgressManyRelationFilter
  updatedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
}

input LessonProgressManyRelationFilter {
  every: LessonProgressWhereInput
  some: LessonProgressWhereInput
  none: LessonProgressWhereInput
}

input EnrollmentOrderByInput {
  id: OrderDirection
  enrollmentDate: OrderDirection
  status: OrderDirection
  progress: OrderDirection
  updatedAt: OrderDirection
  createdAt: OrderDirection
}

input EnrollmentUpdateInput {
  user: UserRelateToOneForUpdateInput
  course: CourseRelateToOneForUpdateInput
  enrollmentDate: DateTime
  status: String
  progress: String
  lessonProgress: LessonProgressRelateToManyForUpdateInput
}

input LessonProgressRelateToManyForUpdateInput {
  disconnect: [LessonProgressWhereUniqueInput!]
  set: [LessonProgressWhereUniqueInput!]
  create: [LessonProgressCreateInput!]
  connect: [LessonProgressWhereUniqueInput!]
}

input EnrollmentUpdateArgs {
  where: EnrollmentWhereUniqueInput!
  data: EnrollmentUpdateInput!
}

input EnrollmentCreateInput {
  user: UserRelateToOneForCreateInput
  course: CourseRelateToOneForCreateInput
  enrollmentDate: DateTime
  status: String
  progress: String
  lessonProgress: LessonProgressRelateToManyForCreateInput
}

input LessonProgressRelateToManyForCreateInput {
  create: [LessonProgressCreateInput!]
  connect: [LessonProgressWhereUniqueInput!]
}

type Community {
  id: ID!
  name: String
  description: String
  status: String
  events(where: EventWhereInput! = {}, orderBy: [EventOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EventWhereUniqueInput): [Event!]
  eventsCount(where: EventWhereInput! = {}): Int
  visibility: String
  bannerImage: String
  members(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  membersCount(where: UserWhereInput! = {}): Int
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
}

input CommunityWhereUniqueInput {
  id: ID
}

input CommunityWhereInput {
  AND: [CommunityWhereInput!]
  OR: [CommunityWhereInput!]
  NOT: [CommunityWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  status: StringNullableFilter
  events: EventManyRelationFilter
  visibility: StringNullableFilter
  bannerImage: StringFilter
  members: UserManyRelationFilter
  posts: PostManyRelationFilter
}

input CommunityOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  status: OrderDirection
  visibility: OrderDirection
  bannerImage: OrderDirection
}

input CommunityUpdateInput {
  name: String
  description: String
  status: String
  events: EventRelateToManyForUpdateInput
  visibility: String
  bannerImage: String
  members: UserRelateToManyForUpdateInput
  posts: PostRelateToManyForUpdateInput
}

input CommunityUpdateArgs {
  where: CommunityWhereUniqueInput!
  data: CommunityUpdateInput!
}

input CommunityCreateInput {
  name: String
  description: String
  status: String
  events: EventRelateToManyForCreateInput
  visibility: String
  bannerImage: String
  members: UserRelateToManyForCreateInput
  posts: PostRelateToManyForCreateInput
}

type SubCategory {
  id: ID!
  name: String
  subSubCategory(where: SubSubCategoryWhereInput! = {}, orderBy: [SubSubCategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SubSubCategoryWhereUniqueInput): [SubSubCategory!]
  subSubCategoryCount(where: SubSubCategoryWhereInput! = {}): Int
  description: String
  image: String
  metadata: JSON
  updatedAt: DateTime
  createdAt: DateTime
  updatedBy: User
  createdBy: User
}

input SubCategoryWhereUniqueInput {
  id: ID
}

input SubCategoryWhereInput {
  AND: [SubCategoryWhereInput!]
  OR: [SubCategoryWhereInput!]
  NOT: [SubCategoryWhereInput!]
  id: IDFilter
  name: StringFilter
  subSubCategory: SubSubCategoryManyRelationFilter
  description: StringFilter
  image: StringFilter
  updatedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
}

input SubSubCategoryManyRelationFilter {
  every: SubSubCategoryWhereInput
  some: SubSubCategoryWhereInput
  none: SubSubCategoryWhereInput
}

input SubCategoryOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  image: OrderDirection
  updatedAt: OrderDirection
  createdAt: OrderDirection
}

input SubCategoryUpdateInput {
  name: String
  subSubCategory: SubSubCategoryRelateToManyForUpdateInput
  description: String
  image: String
  metadata: JSON
}

input SubSubCategoryRelateToManyForUpdateInput {
  disconnect: [SubSubCategoryWhereUniqueInput!]
  set: [SubSubCategoryWhereUniqueInput!]
  create: [SubSubCategoryCreateInput!]
  connect: [SubSubCategoryWhereUniqueInput!]
}

input SubCategoryUpdateArgs {
  where: SubCategoryWhereUniqueInput!
  data: SubCategoryUpdateInput!
}

input SubCategoryCreateInput {
  name: String
  subSubCategory: SubSubCategoryRelateToManyForCreateInput
  description: String
  image: String
  metadata: JSON
}

input SubSubCategoryRelateToManyForCreateInput {
  create: [SubSubCategoryCreateInput!]
  connect: [SubSubCategoryWhereUniqueInput!]
}

type SubSubCategory {
  id: ID!
  name: String
  sunSubCategory(where: SubSubCategoryWhereInput! = {}, orderBy: [SubSubCategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SubSubCategoryWhereUniqueInput): [SubSubCategory!]
  sunSubCategoryCount(where: SubSubCategoryWhereInput! = {}): Int
  description: String
  image: String
  metadata: JSON
  updatedAt: DateTime
  createdAt: DateTime
  updatedBy: User
  createdBy: User
}

input SubSubCategoryWhereUniqueInput {
  id: ID
}

input SubSubCategoryWhereInput {
  AND: [SubSubCategoryWhereInput!]
  OR: [SubSubCategoryWhereInput!]
  NOT: [SubSubCategoryWhereInput!]
  id: IDFilter
  name: StringFilter
  sunSubCategory: SubSubCategoryManyRelationFilter
  description: StringFilter
  image: StringFilter
  updatedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
}

input SubSubCategoryOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  image: OrderDirection
  updatedAt: OrderDirection
  createdAt: OrderDirection
}

input SubSubCategoryUpdateInput {
  name: String
  sunSubCategory: SubSubCategoryRelateToManyForUpdateInput
  description: String
  image: String
  metadata: JSON
}

input SubSubCategoryUpdateArgs {
  where: SubSubCategoryWhereUniqueInput!
  data: SubSubCategoryUpdateInput!
}

input SubSubCategoryCreateInput {
  name: String
  sunSubCategory: SubSubCategoryRelateToManyForCreateInput
  description: String
  image: String
  metadata: JSON
}

type PushNotificationSetting {
  id: ID!
  enablePushNotifications: Boolean
  liveStreams: Boolean
  newMessages: Boolean
  messageRequests: Boolean
  commentsOnPosts: Boolean
  commentsFromPeople: Boolean
  mentions: Boolean
  user: User
  updatedAt: DateTime
  createdAt: DateTime
  updatedBy: User
  createdBy: User
}

input PushNotificationSettingWhereUniqueInput {
  id: ID
}

input PushNotificationSettingWhereInput {
  AND: [PushNotificationSettingWhereInput!]
  OR: [PushNotificationSettingWhereInput!]
  NOT: [PushNotificationSettingWhereInput!]
  id: IDFilter
  enablePushNotifications: BooleanFilter
  liveStreams: BooleanFilter
  newMessages: BooleanFilter
  messageRequests: BooleanFilter
  commentsOnPosts: BooleanFilter
  commentsFromPeople: BooleanFilter
  mentions: BooleanFilter
  user: UserWhereInput
  updatedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
}

input PushNotificationSettingOrderByInput {
  id: OrderDirection
  enablePushNotifications: OrderDirection
  liveStreams: OrderDirection
  newMessages: OrderDirection
  messageRequests: OrderDirection
  commentsOnPosts: OrderDirection
  commentsFromPeople: OrderDirection
  mentions: OrderDirection
  updatedAt: OrderDirection
  createdAt: OrderDirection
}

input PushNotificationSettingUpdateInput {
  enablePushNotifications: Boolean
  liveStreams: Boolean
  newMessages: Boolean
  messageRequests: Boolean
  commentsOnPosts: Boolean
  commentsFromPeople: Boolean
  mentions: Boolean
  user: UserRelateToOneForUpdateInput
}

input PushNotificationSettingUpdateArgs {
  where: PushNotificationSettingWhereUniqueInput!
  data: PushNotificationSettingUpdateInput!
}

input PushNotificationSettingCreateInput {
  enablePushNotifications: Boolean
  liveStreams: Boolean
  newMessages: Boolean
  messageRequests: Boolean
  commentsOnPosts: Boolean
  commentsFromPeople: Boolean
  mentions: Boolean
  user: UserRelateToOneForCreateInput
}

type Referral {
  id: ID!
  referredBy: User
  referredUser: User
  status: String
  updatedAt: DateTime
  createdAt: DateTime
  updatedBy: User
  createdBy: User
}

input ReferralWhereUniqueInput {
  id: ID
}

input ReferralWhereInput {
  AND: [ReferralWhereInput!]
  OR: [ReferralWhereInput!]
  NOT: [ReferralWhereInput!]
  id: IDFilter
  referredBy: UserWhereInput
  referredUser: UserWhereInput
  status: StringNullableFilter
  updatedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
}

input ReferralOrderByInput {
  id: OrderDirection
  status: OrderDirection
  updatedAt: OrderDirection
  createdAt: OrderDirection
}

input ReferralUpdateInput {
  referredBy: UserRelateToOneForUpdateInput
  referredUser: UserRelateToOneForUpdateInput
  status: String
}

input ReferralUpdateArgs {
  where: ReferralWhereUniqueInput!
  data: ReferralUpdateInput!
}

input ReferralCreateInput {
  referredBy: UserRelateToOneForCreateInput
  referredUser: UserRelateToOneForCreateInput
  status: String
}

type ContactUs {
  id: ID!
  image: String
  phoneNumber: String
  email: String
  address: String
  locationCoordinates: JSON
  updatedAt: DateTime
  createdAt: DateTime
  updatedBy: User
  createdBy: User
}

input ContactUsWhereUniqueInput {
  id: ID
  email: String
}

input ContactUsWhereInput {
  AND: [ContactUsWhereInput!]
  OR: [ContactUsWhereInput!]
  NOT: [ContactUsWhereInput!]
  id: IDFilter
  image: StringFilter
  phoneNumber: StringFilter
  email: StringFilter
  address: StringFilter
  updatedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
}

input ContactUsOrderByInput {
  id: OrderDirection
  image: OrderDirection
  phoneNumber: OrderDirection
  email: OrderDirection
  address: OrderDirection
  updatedAt: OrderDirection
  createdAt: OrderDirection
}

input ContactUsUpdateInput {
  image: String
  phoneNumber: String
  email: String
  address: String
  locationCoordinates: JSON
}

input ContactUsUpdateArgs {
  where: ContactUsWhereUniqueInput!
  data: ContactUsUpdateInput!
}

input ContactUsCreateInput {
  image: String
  phoneNumber: String
  email: String
  address: String
  locationCoordinates: JSON
}

type Message {
  id: ID!
  content: String
  timestamp: DateTime
  sender: User
  chat: Chat
  recipients(where: MessageRecipientWhereInput! = {}, orderBy: [MessageRecipientOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MessageRecipientWhereUniqueInput): [MessageRecipient!]
  recipientsCount(where: MessageRecipientWhereInput! = {}): Int
  updatedAt: DateTime
  createdAt: DateTime
  updatedBy: User
  createdBy: User
}

input MessageWhereUniqueInput {
  id: ID
}

input MessageWhereInput {
  AND: [MessageWhereInput!]
  OR: [MessageWhereInput!]
  NOT: [MessageWhereInput!]
  id: IDFilter
  content: StringFilter
  timestamp: DateTimeNullableFilter
  sender: UserWhereInput
  chat: ChatWhereInput
  recipients: MessageRecipientManyRelationFilter
  updatedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
}

input MessageRecipientManyRelationFilter {
  every: MessageRecipientWhereInput
  some: MessageRecipientWhereInput
  none: MessageRecipientWhereInput
}

input MessageOrderByInput {
  id: OrderDirection
  content: OrderDirection
  timestamp: OrderDirection
  updatedAt: OrderDirection
  createdAt: OrderDirection
}

input MessageUpdateInput {
  content: String
  timestamp: DateTime
  sender: UserRelateToOneForUpdateInput
  chat: ChatRelateToOneForUpdateInput
  recipients: MessageRecipientRelateToManyForUpdateInput
}

input ChatRelateToOneForUpdateInput {
  create: ChatCreateInput
  connect: ChatWhereUniqueInput
  disconnect: Boolean
}

input MessageRecipientRelateToManyForUpdateInput {
  disconnect: [MessageRecipientWhereUniqueInput!]
  set: [MessageRecipientWhereUniqueInput!]
  create: [MessageRecipientCreateInput!]
  connect: [MessageRecipientWhereUniqueInput!]
}

input MessageUpdateArgs {
  where: MessageWhereUniqueInput!
  data: MessageUpdateInput!
}

input MessageCreateInput {
  content: String
  timestamp: DateTime
  sender: UserRelateToOneForCreateInput
  chat: ChatRelateToOneForCreateInput
  recipients: MessageRecipientRelateToManyForCreateInput
}

input ChatRelateToOneForCreateInput {
  create: ChatCreateInput
  connect: ChatWhereUniqueInput
}

input MessageRecipientRelateToManyForCreateInput {
  create: [MessageRecipientCreateInput!]
  connect: [MessageRecipientWhereUniqueInput!]
}

type Chat {
  id: ID!
  name: String
  chatType: String
  members(where: ChatMemberWhereInput! = {}, orderBy: [ChatMemberOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ChatMemberWhereUniqueInput): [ChatMember!]
  membersCount(where: ChatMemberWhereInput! = {}): Int
  messages(where: MessageWhereInput! = {}, orderBy: [MessageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MessageWhereUniqueInput): [Message!]
  messagesCount(where: MessageWhereInput! = {}): Int
  updatedAt: DateTime
  createdAt: DateTime
  updatedBy: User
  createdBy: User
}

input ChatWhereUniqueInput {
  id: ID
}

input ChatWhereInput {
  AND: [ChatWhereInput!]
  OR: [ChatWhereInput!]
  NOT: [ChatWhereInput!]
  id: IDFilter
  name: StringFilter
  chatType: StringNullableFilter
  members: ChatMemberManyRelationFilter
  messages: MessageManyRelationFilter
  updatedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
}

input ChatOrderByInput {
  id: OrderDirection
  name: OrderDirection
  chatType: OrderDirection
  updatedAt: OrderDirection
  createdAt: OrderDirection
}

input ChatUpdateInput {
  name: String
  chatType: String
  members: ChatMemberRelateToManyForUpdateInput
  messages: MessageRelateToManyForUpdateInput
}

input ChatUpdateArgs {
  where: ChatWhereUniqueInput!
  data: ChatUpdateInput!
}

input ChatCreateInput {
  name: String
  chatType: String
  members: ChatMemberRelateToManyForCreateInput
  messages: MessageRelateToManyForCreateInput
}

type ChatMember {
  id: ID!
  chat: Chat
  user: User
  updatedAt: DateTime
  createdAt: DateTime
  updatedBy: User
  createdBy: User
}

input ChatMemberWhereUniqueInput {
  id: ID
}

input ChatMemberWhereInput {
  AND: [ChatMemberWhereInput!]
  OR: [ChatMemberWhereInput!]
  NOT: [ChatMemberWhereInput!]
  id: IDFilter
  chat: ChatWhereInput
  user: UserWhereInput
  updatedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
}

input ChatMemberOrderByInput {
  id: OrderDirection
  updatedAt: OrderDirection
  createdAt: OrderDirection
}

input ChatMemberUpdateInput {
  chat: ChatRelateToOneForUpdateInput
  user: UserRelateToOneForUpdateInput
}

input ChatMemberUpdateArgs {
  where: ChatMemberWhereUniqueInput!
  data: ChatMemberUpdateInput!
}

input ChatMemberCreateInput {
  chat: ChatRelateToOneForCreateInput
  user: UserRelateToOneForCreateInput
}

type MessageRecipient {
  id: ID!
  message: Message
  user: User
  read: Boolean
  readTimestamp: DateTime
  updatedAt: DateTime
  createdAt: DateTime
  updatedBy: User
  createdBy: User
}

input MessageRecipientWhereUniqueInput {
  id: ID
}

input MessageRecipientWhereInput {
  AND: [MessageRecipientWhereInput!]
  OR: [MessageRecipientWhereInput!]
  NOT: [MessageRecipientWhereInput!]
  id: IDFilter
  message: MessageWhereInput
  user: UserWhereInput
  read: BooleanFilter
  readTimestamp: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
}

input MessageRecipientOrderByInput {
  id: OrderDirection
  read: OrderDirection
  readTimestamp: OrderDirection
  updatedAt: OrderDirection
  createdAt: OrderDirection
}

input MessageRecipientUpdateInput {
  message: MessageRelateToOneForUpdateInput
  user: UserRelateToOneForUpdateInput
  read: Boolean
  readTimestamp: DateTime
}

input MessageRelateToOneForUpdateInput {
  create: MessageCreateInput
  connect: MessageWhereUniqueInput
  disconnect: Boolean
}

input MessageRecipientUpdateArgs {
  where: MessageRecipientWhereUniqueInput!
  data: MessageRecipientUpdateInput!
}

input MessageRecipientCreateInput {
  message: MessageRelateToOneForCreateInput
  user: UserRelateToOneForCreateInput
  read: Boolean
  readTimestamp: DateTime
}

input MessageRelateToOneForCreateInput {
  create: MessageCreateInput
  connect: MessageWhereUniqueInput
}

type JoinRequest {
  id: ID!
  user: User
  group: Group
  status: String
  requestedAt: DateTime
  updatedAt: DateTime
  createdAt: DateTime
  updatedBy: User
  createdBy: User
}

input JoinRequestWhereUniqueInput {
  id: ID
}

input JoinRequestWhereInput {
  AND: [JoinRequestWhereInput!]
  OR: [JoinRequestWhereInput!]
  NOT: [JoinRequestWhereInput!]
  id: IDFilter
  user: UserWhereInput
  group: GroupWhereInput
  status: StringNullableFilter
  requestedAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
}

input JoinRequestOrderByInput {
  id: OrderDirection
  status: OrderDirection
  requestedAt: OrderDirection
  updatedAt: OrderDirection
  createdAt: OrderDirection
}

input JoinRequestUpdateInput {
  user: UserRelateToOneForUpdateInput
  group: GroupRelateToOneForUpdateInput
  status: String
  requestedAt: DateTime
}

input JoinRequestUpdateArgs {
  where: JoinRequestWhereUniqueInput!
  data: JoinRequestUpdateInput!
}

input JoinRequestCreateInput {
  user: UserRelateToOneForCreateInput
  group: GroupRelateToOneForCreateInput
  status: String
  requestedAt: DateTime
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createLike(data: LikeCreateInput!): Like
  createLikes(data: [LikeCreateInput!]!): [Like]
  updateLike(where: LikeWhereUniqueInput!, data: LikeUpdateInput!): Like
  updateLikes(data: [LikeUpdateArgs!]!): [Like]
  deleteLike(where: LikeWhereUniqueInput!): Like
  deleteLikes(where: [LikeWhereUniqueInput!]!): [Like]
  createGroup(data: GroupCreateInput!): Group
  createGroups(data: [GroupCreateInput!]!): [Group]
  updateGroup(where: GroupWhereUniqueInput!, data: GroupUpdateInput!): Group
  updateGroups(data: [GroupUpdateArgs!]!): [Group]
  deleteGroup(where: GroupWhereUniqueInput!): Group
  deleteGroups(where: [GroupWhereUniqueInput!]!): [Group]
  createNotification(data: NotificationCreateInput!): Notification
  createNotifications(data: [NotificationCreateInput!]!): [Notification]
  updateNotification(where: NotificationWhereUniqueInput!, data: NotificationUpdateInput!): Notification
  updateNotifications(data: [NotificationUpdateArgs!]!): [Notification]
  deleteNotification(where: NotificationWhereUniqueInput!): Notification
  deleteNotifications(where: [NotificationWhereUniqueInput!]!): [Notification]
  createCategory(data: CategoryCreateInput!): Category
  createCategories(data: [CategoryCreateInput!]!): [Category]
  updateCategory(where: CategoryWhereUniqueInput!, data: CategoryUpdateInput!): Category
  updateCategories(data: [CategoryUpdateArgs!]!): [Category]
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteCategories(where: [CategoryWhereUniqueInput!]!): [Category]
  createEvent(data: EventCreateInput!): Event
  createEvents(data: [EventCreateInput!]!): [Event]
  updateEvent(where: EventWhereUniqueInput!, data: EventUpdateInput!): Event
  updateEvents(data: [EventUpdateArgs!]!): [Event]
  deleteEvent(where: EventWhereUniqueInput!): Event
  deleteEvents(where: [EventWhereUniqueInput!]!): [Event]
  createVideoResource(data: VideoResourceCreateInput!): VideoResource
  createVideoResources(data: [VideoResourceCreateInput!]!): [VideoResource]
  updateVideoResource(where: VideoResourceWhereUniqueInput!, data: VideoResourceUpdateInput!): VideoResource
  updateVideoResources(data: [VideoResourceUpdateArgs!]!): [VideoResource]
  deleteVideoResource(where: VideoResourceWhereUniqueInput!): VideoResource
  deleteVideoResources(where: [VideoResourceWhereUniqueInput!]!): [VideoResource]
  createPostSchedule(data: PostScheduleCreateInput!): PostSchedule
  createPostSchedules(data: [PostScheduleCreateInput!]!): [PostSchedule]
  updatePostSchedule(where: PostScheduleWhereUniqueInput!, data: PostScheduleUpdateInput!): PostSchedule
  updatePostSchedules(data: [PostScheduleUpdateArgs!]!): [PostSchedule]
  deletePostSchedule(where: PostScheduleWhereUniqueInput!): PostSchedule
  deletePostSchedules(where: [PostScheduleWhereUniqueInput!]!): [PostSchedule]
  createQA(data: QACreateInput!): QA
  createQAS(data: [QACreateInput!]!): [QA]
  updateQA(where: QAWhereUniqueInput!, data: QAUpdateInput!): QA
  updateQAS(data: [QAUpdateArgs!]!): [QA]
  deleteQA(where: QAWhereUniqueInput!): QA
  deleteQAS(where: [QAWhereUniqueInput!]!): [QA]
  createGroupMember(data: GroupMemberCreateInput!): GroupMember
  createGroupMembers(data: [GroupMemberCreateInput!]!): [GroupMember]
  updateGroupMember(where: GroupMemberWhereUniqueInput!, data: GroupMemberUpdateInput!): GroupMember
  updateGroupMembers(data: [GroupMemberUpdateArgs!]!): [GroupMember]
  deleteGroupMember(where: GroupMemberWhereUniqueInput!): GroupMember
  deleteGroupMembers(where: [GroupMemberWhereUniqueInput!]!): [GroupMember]
  createSurvey(data: SurveyCreateInput!): Survey
  createSurveys(data: [SurveyCreateInput!]!): [Survey]
  updateSurvey(where: SurveyWhereUniqueInput!, data: SurveyUpdateInput!): Survey
  updateSurveys(data: [SurveyUpdateArgs!]!): [Survey]
  deleteSurvey(where: SurveyWhereUniqueInput!): Survey
  deleteSurveys(where: [SurveyWhereUniqueInput!]!): [Survey]
  createAnnouncement(data: AnnouncementCreateInput!): Announcement
  createAnnouncements(data: [AnnouncementCreateInput!]!): [Announcement]
  updateAnnouncement(where: AnnouncementWhereUniqueInput!, data: AnnouncementUpdateInput!): Announcement
  updateAnnouncements(data: [AnnouncementUpdateArgs!]!): [Announcement]
  deleteAnnouncement(where: AnnouncementWhereUniqueInput!): Announcement
  deleteAnnouncements(where: [AnnouncementWhereUniqueInput!]!): [Announcement]
  createPrivacyAndTerm(data: PrivacyAndTermCreateInput!): PrivacyAndTerm
  createPrivacyAndTerms(data: [PrivacyAndTermCreateInput!]!): [PrivacyAndTerm]
  updatePrivacyAndTerm(where: PrivacyAndTermWhereUniqueInput!, data: PrivacyAndTermUpdateInput!): PrivacyAndTerm
  updatePrivacyAndTerms(data: [PrivacyAndTermUpdateArgs!]!): [PrivacyAndTerm]
  deletePrivacyAndTerm(where: PrivacyAndTermWhereUniqueInput!): PrivacyAndTerm
  deletePrivacyAndTerms(where: [PrivacyAndTermWhereUniqueInput!]!): [PrivacyAndTerm]
  createComment(data: CommentCreateInput!): Comment
  createComments(data: [CommentCreateInput!]!): [Comment]
  updateComment(where: CommentWhereUniqueInput!, data: CommentUpdateInput!): Comment
  updateComments(data: [CommentUpdateArgs!]!): [Comment]
  deleteComment(where: CommentWhereUniqueInput!): Comment
  deleteComments(where: [CommentWhereUniqueInput!]!): [Comment]
  createLearningSet(data: LearningSetCreateInput!): LearningSet
  createLearningSets(data: [LearningSetCreateInput!]!): [LearningSet]
  updateLearningSet(where: LearningSetWhereUniqueInput!, data: LearningSetUpdateInput!): LearningSet
  updateLearningSets(data: [LearningSetUpdateArgs!]!): [LearningSet]
  deleteLearningSet(where: LearningSetWhereUniqueInput!): LearningSet
  deleteLearningSets(where: [LearningSetWhereUniqueInput!]!): [LearningSet]
  createCourse(data: CourseCreateInput!): Course
  createCourses(data: [CourseCreateInput!]!): [Course]
  updateCourse(where: CourseWhereUniqueInput!, data: CourseUpdateInput!): Course
  updateCourses(data: [CourseUpdateArgs!]!): [Course]
  deleteCourse(where: CourseWhereUniqueInput!): Course
  deleteCourses(where: [CourseWhereUniqueInput!]!): [Course]
  createLesson(data: LessonCreateInput!): Lesson
  createLessons(data: [LessonCreateInput!]!): [Lesson]
  updateLesson(where: LessonWhereUniqueInput!, data: LessonUpdateInput!): Lesson
  updateLessons(data: [LessonUpdateArgs!]!): [Lesson]
  deleteLesson(where: LessonWhereUniqueInput!): Lesson
  deleteLessons(where: [LessonWhereUniqueInput!]!): [Lesson]
  createLessonProgress(data: LessonProgressCreateInput!): LessonProgress
  createLessonProgresses(data: [LessonProgressCreateInput!]!): [LessonProgress]
  updateLessonProgress(where: LessonProgressWhereUniqueInput!, data: LessonProgressUpdateInput!): LessonProgress
  updateLessonProgresses(data: [LessonProgressUpdateArgs!]!): [LessonProgress]
  deleteLessonProgress(where: LessonProgressWhereUniqueInput!): LessonProgress
  deleteLessonProgresses(where: [LessonProgressWhereUniqueInput!]!): [LessonProgress]
  createEnrollment(data: EnrollmentCreateInput!): Enrollment
  createEnrollments(data: [EnrollmentCreateInput!]!): [Enrollment]
  updateEnrollment(where: EnrollmentWhereUniqueInput!, data: EnrollmentUpdateInput!): Enrollment
  updateEnrollments(data: [EnrollmentUpdateArgs!]!): [Enrollment]
  deleteEnrollment(where: EnrollmentWhereUniqueInput!): Enrollment
  deleteEnrollments(where: [EnrollmentWhereUniqueInput!]!): [Enrollment]
  createCommunity(data: CommunityCreateInput!): Community
  createCommunities(data: [CommunityCreateInput!]!): [Community]
  updateCommunity(where: CommunityWhereUniqueInput!, data: CommunityUpdateInput!): Community
  updateCommunities(data: [CommunityUpdateArgs!]!): [Community]
  deleteCommunity(where: CommunityWhereUniqueInput!): Community
  deleteCommunities(where: [CommunityWhereUniqueInput!]!): [Community]
  createSubCategory(data: SubCategoryCreateInput!): SubCategory
  createSubCategories(data: [SubCategoryCreateInput!]!): [SubCategory]
  updateSubCategory(where: SubCategoryWhereUniqueInput!, data: SubCategoryUpdateInput!): SubCategory
  updateSubCategories(data: [SubCategoryUpdateArgs!]!): [SubCategory]
  deleteSubCategory(where: SubCategoryWhereUniqueInput!): SubCategory
  deleteSubCategories(where: [SubCategoryWhereUniqueInput!]!): [SubCategory]
  createSubSubCategory(data: SubSubCategoryCreateInput!): SubSubCategory
  createSubSubCategories(data: [SubSubCategoryCreateInput!]!): [SubSubCategory]
  updateSubSubCategory(where: SubSubCategoryWhereUniqueInput!, data: SubSubCategoryUpdateInput!): SubSubCategory
  updateSubSubCategories(data: [SubSubCategoryUpdateArgs!]!): [SubSubCategory]
  deleteSubSubCategory(where: SubSubCategoryWhereUniqueInput!): SubSubCategory
  deleteSubSubCategories(where: [SubSubCategoryWhereUniqueInput!]!): [SubSubCategory]
  createPushNotificationSetting(data: PushNotificationSettingCreateInput!): PushNotificationSetting
  createPushNotificationSettings(data: [PushNotificationSettingCreateInput!]!): [PushNotificationSetting]
  updatePushNotificationSetting(where: PushNotificationSettingWhereUniqueInput!, data: PushNotificationSettingUpdateInput!): PushNotificationSetting
  updatePushNotificationSettings(data: [PushNotificationSettingUpdateArgs!]!): [PushNotificationSetting]
  deletePushNotificationSetting(where: PushNotificationSettingWhereUniqueInput!): PushNotificationSetting
  deletePushNotificationSettings(where: [PushNotificationSettingWhereUniqueInput!]!): [PushNotificationSetting]
  createReferral(data: ReferralCreateInput!): Referral
  createReferrals(data: [ReferralCreateInput!]!): [Referral]
  updateReferral(where: ReferralWhereUniqueInput!, data: ReferralUpdateInput!): Referral
  updateReferrals(data: [ReferralUpdateArgs!]!): [Referral]
  deleteReferral(where: ReferralWhereUniqueInput!): Referral
  deleteReferrals(where: [ReferralWhereUniqueInput!]!): [Referral]
  createContactUs(data: ContactUsCreateInput!): ContactUs
  createContactuses(data: [ContactUsCreateInput!]!): [ContactUs]
  updateContactUs(where: ContactUsWhereUniqueInput!, data: ContactUsUpdateInput!): ContactUs
  updateContactuses(data: [ContactUsUpdateArgs!]!): [ContactUs]
  deleteContactUs(where: ContactUsWhereUniqueInput!): ContactUs
  deleteContactuses(where: [ContactUsWhereUniqueInput!]!): [ContactUs]
  createMessage(data: MessageCreateInput!): Message
  createMessages(data: [MessageCreateInput!]!): [Message]
  updateMessage(where: MessageWhereUniqueInput!, data: MessageUpdateInput!): Message
  updateMessages(data: [MessageUpdateArgs!]!): [Message]
  deleteMessage(where: MessageWhereUniqueInput!): Message
  deleteMessages(where: [MessageWhereUniqueInput!]!): [Message]
  createChat(data: ChatCreateInput!): Chat
  createChats(data: [ChatCreateInput!]!): [Chat]
  updateChat(where: ChatWhereUniqueInput!, data: ChatUpdateInput!): Chat
  updateChats(data: [ChatUpdateArgs!]!): [Chat]
  deleteChat(where: ChatWhereUniqueInput!): Chat
  deleteChats(where: [ChatWhereUniqueInput!]!): [Chat]
  createChatMember(data: ChatMemberCreateInput!): ChatMember
  createChatMembers(data: [ChatMemberCreateInput!]!): [ChatMember]
  updateChatMember(where: ChatMemberWhereUniqueInput!, data: ChatMemberUpdateInput!): ChatMember
  updateChatMembers(data: [ChatMemberUpdateArgs!]!): [ChatMember]
  deleteChatMember(where: ChatMemberWhereUniqueInput!): ChatMember
  deleteChatMembers(where: [ChatMemberWhereUniqueInput!]!): [ChatMember]
  createMessageRecipient(data: MessageRecipientCreateInput!): MessageRecipient
  createMessageRecipients(data: [MessageRecipientCreateInput!]!): [MessageRecipient]
  updateMessageRecipient(where: MessageRecipientWhereUniqueInput!, data: MessageRecipientUpdateInput!): MessageRecipient
  updateMessageRecipients(data: [MessageRecipientUpdateArgs!]!): [MessageRecipient]
  deleteMessageRecipient(where: MessageRecipientWhereUniqueInput!): MessageRecipient
  deleteMessageRecipients(where: [MessageRecipientWhereUniqueInput!]!): [MessageRecipient]
  createJoinRequest(data: JoinRequestCreateInput!): JoinRequest
  createJoinRequests(data: [JoinRequestCreateInput!]!): [JoinRequest]
  updateJoinRequest(where: JoinRequestWhereUniqueInput!, data: JoinRequestUpdateInput!): JoinRequest
  updateJoinRequests(data: [JoinRequestUpdateArgs!]!): [JoinRequest]
  deleteJoinRequest(where: JoinRequestWhereUniqueInput!): JoinRequest
  deleteJoinRequests(where: [JoinRequestWhereUniqueInput!]!): [JoinRequest]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
  UserSignUp(email: String!, firstName: String!, lastName: String, password: String!): UserSignUpResponse
  markAsRead(messageId: ID!, userId: ID!): MessageRecipient!
  sendTypingStatus(chatId: ID!, userId: ID!, isTyping: Boolean!, name: String!): Boolean
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  firstName: String
  email: String
  password: String
}

type Query {
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  post(where: PostWhereUniqueInput!): Post
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  tag(where: TagWhereUniqueInput!): Tag
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  like(where: LikeWhereUniqueInput!): Like
  likes(where: LikeWhereInput! = {}, orderBy: [LikeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LikeWhereUniqueInput): [Like!]
  likesCount(where: LikeWhereInput! = {}): Int
  group(where: GroupWhereUniqueInput!): Group
  groups(where: GroupWhereInput! = {}, orderBy: [GroupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: GroupWhereUniqueInput): [Group!]
  groupsCount(where: GroupWhereInput! = {}): Int
  notification(where: NotificationWhereUniqueInput!): Notification
  notifications(where: NotificationWhereInput! = {}, orderBy: [NotificationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: NotificationWhereUniqueInput): [Notification!]
  notificationsCount(where: NotificationWhereInput! = {}): Int
  category(where: CategoryWhereUniqueInput!): Category
  categories(where: CategoryWhereInput! = {}, orderBy: [CategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CategoryWhereUniqueInput): [Category!]
  categoriesCount(where: CategoryWhereInput! = {}): Int
  event(where: EventWhereUniqueInput!): Event
  events(where: EventWhereInput! = {}, orderBy: [EventOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EventWhereUniqueInput): [Event!]
  eventsCount(where: EventWhereInput! = {}): Int
  videoResource(where: VideoResourceWhereUniqueInput!): VideoResource
  videoResources(where: VideoResourceWhereInput! = {}, orderBy: [VideoResourceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: VideoResourceWhereUniqueInput): [VideoResource!]
  videoResourcesCount(where: VideoResourceWhereInput! = {}): Int
  postSchedule(where: PostScheduleWhereUniqueInput!): PostSchedule
  postSchedules(where: PostScheduleWhereInput! = {}, orderBy: [PostScheduleOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostScheduleWhereUniqueInput): [PostSchedule!]
  postSchedulesCount(where: PostScheduleWhereInput! = {}): Int
  qA(where: QAWhereUniqueInput!): QA
  qAS(where: QAWhereInput! = {}, orderBy: [QAOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: QAWhereUniqueInput): [QA!]
  qASCount(where: QAWhereInput! = {}): Int
  groupMember(where: GroupMemberWhereUniqueInput!): GroupMember
  groupMembers(where: GroupMemberWhereInput! = {}, orderBy: [GroupMemberOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: GroupMemberWhereUniqueInput): [GroupMember!]
  groupMembersCount(where: GroupMemberWhereInput! = {}): Int
  survey(where: SurveyWhereUniqueInput!): Survey
  surveys(where: SurveyWhereInput! = {}, orderBy: [SurveyOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SurveyWhereUniqueInput): [Survey!]
  surveysCount(where: SurveyWhereInput! = {}): Int
  announcement(where: AnnouncementWhereUniqueInput!): Announcement
  announcements(where: AnnouncementWhereInput! = {}, orderBy: [AnnouncementOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AnnouncementWhereUniqueInput): [Announcement!]
  announcementsCount(where: AnnouncementWhereInput! = {}): Int
  privacyAndTerm(where: PrivacyAndTermWhereUniqueInput!): PrivacyAndTerm
  privacyAndTerms(where: PrivacyAndTermWhereInput! = {}, orderBy: [PrivacyAndTermOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PrivacyAndTermWhereUniqueInput): [PrivacyAndTerm!]
  privacyAndTermsCount(where: PrivacyAndTermWhereInput! = {}): Int
  comment(where: CommentWhereUniqueInput!): Comment
  comments(where: CommentWhereInput! = {}, orderBy: [CommentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CommentWhereUniqueInput): [Comment!]
  commentsCount(where: CommentWhereInput! = {}): Int
  learningSet(where: LearningSetWhereUniqueInput!): LearningSet
  learningSets(where: LearningSetWhereInput! = {}, orderBy: [LearningSetOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LearningSetWhereUniqueInput): [LearningSet!]
  learningSetsCount(where: LearningSetWhereInput! = {}): Int
  course(where: CourseWhereUniqueInput!): Course
  courses(where: CourseWhereInput! = {}, orderBy: [CourseOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CourseWhereUniqueInput): [Course!]
  coursesCount(where: CourseWhereInput! = {}): Int
  lesson(where: LessonWhereUniqueInput!): Lesson
  lessons(where: LessonWhereInput! = {}, orderBy: [LessonOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LessonWhereUniqueInput): [Lesson!]
  lessonsCount(where: LessonWhereInput! = {}): Int
  lessonProgress(where: LessonProgressWhereUniqueInput!): LessonProgress
  lessonProgresses(where: LessonProgressWhereInput! = {}, orderBy: [LessonProgressOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LessonProgressWhereUniqueInput): [LessonProgress!]
  lessonProgressesCount(where: LessonProgressWhereInput! = {}): Int
  enrollment(where: EnrollmentWhereUniqueInput!): Enrollment
  enrollments(where: EnrollmentWhereInput! = {}, orderBy: [EnrollmentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EnrollmentWhereUniqueInput): [Enrollment!]
  enrollmentsCount(where: EnrollmentWhereInput! = {}): Int
  community(where: CommunityWhereUniqueInput!): Community
  communities(where: CommunityWhereInput! = {}, orderBy: [CommunityOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CommunityWhereUniqueInput): [Community!]
  communitiesCount(where: CommunityWhereInput! = {}): Int
  subCategory(where: SubCategoryWhereUniqueInput!): SubCategory
  subCategories(where: SubCategoryWhereInput! = {}, orderBy: [SubCategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SubCategoryWhereUniqueInput): [SubCategory!]
  subCategoriesCount(where: SubCategoryWhereInput! = {}): Int
  subSubCategory(where: SubSubCategoryWhereUniqueInput!): SubSubCategory
  subSubCategories(where: SubSubCategoryWhereInput! = {}, orderBy: [SubSubCategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SubSubCategoryWhereUniqueInput): [SubSubCategory!]
  subSubCategoriesCount(where: SubSubCategoryWhereInput! = {}): Int
  pushNotificationSetting(where: PushNotificationSettingWhereUniqueInput!): PushNotificationSetting
  pushNotificationSettings(where: PushNotificationSettingWhereInput! = {}, orderBy: [PushNotificationSettingOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PushNotificationSettingWhereUniqueInput): [PushNotificationSetting!]
  pushNotificationSettingsCount(where: PushNotificationSettingWhereInput! = {}): Int
  referral(where: ReferralWhereUniqueInput!): Referral
  referrals(where: ReferralWhereInput! = {}, orderBy: [ReferralOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ReferralWhereUniqueInput): [Referral!]
  referralsCount(where: ReferralWhereInput! = {}): Int
  contactUs(where: ContactUsWhereUniqueInput!): ContactUs
  contactuses(where: ContactUsWhereInput! = {}, orderBy: [ContactUsOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ContactUsWhereUniqueInput): [ContactUs!]
  contactusesCount(where: ContactUsWhereInput! = {}): Int
  message(where: MessageWhereUniqueInput!): Message
  messages(where: MessageWhereInput! = {}, orderBy: [MessageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MessageWhereUniqueInput): [Message!]
  messagesCount(where: MessageWhereInput! = {}): Int
  chat(where: ChatWhereUniqueInput!): Chat
  chats(where: ChatWhereInput! = {}, orderBy: [ChatOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ChatWhereUniqueInput): [Chat!]
  chatsCount(where: ChatWhereInput! = {}): Int
  chatMember(where: ChatMemberWhereUniqueInput!): ChatMember
  chatMembers(where: ChatMemberWhereInput! = {}, orderBy: [ChatMemberOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ChatMemberWhereUniqueInput): [ChatMember!]
  chatMembersCount(where: ChatMemberWhereInput! = {}): Int
  messageRecipient(where: MessageRecipientWhereUniqueInput!): MessageRecipient
  messageRecipients(where: MessageRecipientWhereInput! = {}, orderBy: [MessageRecipientOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MessageRecipientWhereUniqueInput): [MessageRecipient!]
  messageRecipientsCount(where: MessageRecipientWhereInput! = {}): Int
  joinRequest(where: JoinRequestWhereUniqueInput!): JoinRequest
  joinRequests(where: JoinRequestWhereInput! = {}, orderBy: [JoinRequestOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: JoinRequestWhereUniqueInput): [JoinRequest!]
  joinRequestsCount(where: JoinRequestWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}

type UserSignUpResponse {
  id: ID
  email: String
  firstName: String
  error: String
  message: String
  sessionToken: String
}

type TypingStatus {
  chatId: ID!
  userId: ID!
  isTyping: Boolean!
  name: String!
}

type Subscription {
  messageSent(chatId: ID!): Message!
  messageRead(messageId: ID!): Message
  chatListUpdate(userId: ID!): ChatListUpdate!
  userTyping(chatId: ID!, userId: ID!): TypingStatus!
}

type ChatListUpdate {
  chat: Chat!
  message: Message!
}
