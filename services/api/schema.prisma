// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "postgresql"
}

generator client {
  provider = "prisma-client-js"
  output   = "node_modules/.myprisma/client"
}

model User {
  id                                     String                    @id @default(cuid())
  firstName                              String                    @default("")
  lastName                               String                    @default("")
  isLastNamePublic                       Boolean                   @default(false)
  email                                  String                    @unique @default("")
  isEmailPublic                          Boolean                   @default(false)
  followers                              User[]                    @relation("User_followers")
  following                              User[]                    @relation("User_followers")
  password                               String
  enrollments                            Enrollment[]              @relation("Enrollment_user")
  comments                               Comment[]                 @relation("Comment_user")
  pronoun                                String                    @default("")
  isPronounPublic                        Boolean                   @default(false)
  dob                                    DateTime?
  isDobPublic                            Boolean                   @default(false)
  contactInfo                            Json?
  isContactPublic                        Boolean                   @default(false)
  interests                              Json?
  isInterestsPublic                      Boolean                   @default(false)
  employmentStatus                       String                    @default("")
  isEmploymentStatusPublic               Boolean                   @default(false)
  socialFields                           Json?
  theme                                  String?                   @default("light")
  pushNotificationSettings               PushNotificationSetting?  @relation("PushNotificationSetting_user")
  referralCode                           String                    @default("")
  referrals                              Referral[]                @relation("Referral_referredBy")
  messagesSent                           Message[]                 @relation("Message_sender")
  chatMembers                            ChatMember[]              @relation("ChatMember_user")
  isAdmin                                Boolean                   @default(false)
  verified                               Boolean                   @default(false)
  shadowBanned                           Boolean                   @default(false)
  groups                                 GroupMember[]             @relation("GroupMember_user")
  groupManaged                           Group[]                   @relation("Group_admins")
  joinRequests                           JoinRequest[]             @relation("JoinRequest_user")
  posts                                  Post[]                    @relation("Post_author")
  community                              Community?                @relation("User_community", fields: [communityId], references: [id])
  communityId                            String?                   @map("community")
  isProfileCompleted                     Boolean                   @default(false)
  likes                                  Like[]                    @relation("Like_user")
  notifications                          Notification[]            @relation("Notification_user")
  userType                               String?
  ageRange                               String                    @default("")
  phone                                  String                    @default("")
  heardAboutApp                          String                    @default("")
  housingSupport                         String?
  isHousingSupportPublic                 Boolean                   @default(false)
  foodClothingSupport                    String?
  educationStatus                        String?
  isEducationStatusPublic                Boolean                   @default(false)
  collegeUniversity                      String                    @default("")
  isCollegeUniversityPublic              Boolean                   @default(false)
  companyName                            String                    @default("")
  isCompanyNamePublic                    Boolean                   @default(false)
  zipCode                                String                    @default("")
  isZipCodePublic                        Boolean                   @default(false)
  favoriteColor                          String                    @default("")
  isFavoriteColorPublic                  Boolean                   @default(false)
  aboutYourself                          String                    @default("")
  isAboutYourselfPublic                  Boolean                   @default(false)
  refererDetails                         User?                     @relation("User_refererDetails", fields: [refererDetailsId], references: [id])
  refererDetailsId                       String?                   @map("refererDetails")
  isRefererPublic                        Boolean                   @default(false)
  assistance                             String?
  birthMonth                             String?
  isBirthMonthPublic                     Boolean                   @default(false)
  updatedAt                              DateTime?                 @updatedAt
  createdAt                              DateTime?                 @default(now())
  updatedBy                              User?                     @relation("User_updatedBy", fields: [updatedById], references: [id])
  updatedById                            String?                   @map("updatedBy")
  createdBy                              User?                     @relation("User_createdBy", fields: [createdById], references: [id])
  createdById                            String?                   @map("createdBy")
  from_User_refererDetails               User[]                    @relation("User_refererDetails")
  from_User_updatedBy                    User[]                    @relation("User_updatedBy")
  from_User_createdBy                    User[]                    @relation("User_createdBy")
  from_Post_updatedBy                    Post[]                    @relation("Post_updatedBy")
  from_Post_createdBy                    Post[]                    @relation("Post_createdBy")
  from_Tag_updatedBy                     Tag[]                     @relation("Tag_updatedBy")
  from_Tag_createdBy                     Tag[]                     @relation("Tag_createdBy")
  from_Like_updatedBy                    Like[]                    @relation("Like_updatedBy")
  from_Like_createdBy                    Like[]                    @relation("Like_createdBy")
  from_Group_updatedBy                   Group[]                   @relation("Group_updatedBy")
  from_Group_createdBy                   Group[]                   @relation("Group_createdBy")
  from_Notification_updatedBy            Notification[]            @relation("Notification_updatedBy")
  from_Notification_createdBy            Notification[]            @relation("Notification_createdBy")
  from_Category_updatedBy                Category[]                @relation("Category_updatedBy")
  from_Category_createdBy                Category[]                @relation("Category_createdBy")
  from_Event_acceptedUsers               Event[]                   @relation("Event_acceptedUsers")
  from_Event_updatedBy                   Event[]                   @relation("Event_updatedBy")
  from_Event_createdBy                   Event[]                   @relation("Event_createdBy")
  from_VideoResource_updatedBy           VideoResource[]           @relation("VideoResource_updatedBy")
  from_VideoResource_createdBy           VideoResource[]           @relation("VideoResource_createdBy")
  from_PostSchedule_updatedBy            PostSchedule[]            @relation("PostSchedule_updatedBy")
  from_PostSchedule_createdBy            PostSchedule[]            @relation("PostSchedule_createdBy")
  from_QA_user                           QA[]                      @relation("QA_user")
  from_QA_staff                          QA[]                      @relation("QA_staff")
  from_QA_updatedBy                      QA[]                      @relation("QA_updatedBy")
  from_QA_createdBy                      QA[]                      @relation("QA_createdBy")
  from_GroupMember_updatedBy             GroupMember[]             @relation("GroupMember_updatedBy")
  from_GroupMember_createdBy             GroupMember[]             @relation("GroupMember_createdBy")
  from_Survey_updatedBy                  Survey[]                  @relation("Survey_updatedBy")
  from_Survey_createdBy                  Survey[]                  @relation("Survey_createdBy")
  from_Announcement_updatedBy            Announcement[]            @relation("Announcement_updatedBy")
  from_Announcement_createdBy            Announcement[]            @relation("Announcement_createdBy")
  from_PrivacyAndTerm_updatedBy          PrivacyAndTerm[]          @relation("PrivacyAndTerm_updatedBy")
  from_PrivacyAndTerm_createdBy          PrivacyAndTerm[]          @relation("PrivacyAndTerm_createdBy")
  from_Comment_updatedBy                 Comment[]                 @relation("Comment_updatedBy")
  from_Comment_createdBy                 Comment[]                 @relation("Comment_createdBy")
  from_LearningSet_updatedBy             LearningSet[]             @relation("LearningSet_updatedBy")
  from_LearningSet_createdBy             LearningSet[]             @relation("LearningSet_createdBy")
  from_Course_updatedBy                  Course[]                  @relation("Course_updatedBy")
  from_Course_createdBy                  Course[]                  @relation("Course_createdBy")
  from_LessonProgress_updatedBy          LessonProgress[]          @relation("LessonProgress_updatedBy")
  from_LessonProgress_createdBy          LessonProgress[]          @relation("LessonProgress_createdBy")
  from_Enrollment_updatedBy              Enrollment[]              @relation("Enrollment_updatedBy")
  from_Enrollment_createdBy              Enrollment[]              @relation("Enrollment_createdBy")
  from_SubCategory_updatedBy             SubCategory[]             @relation("SubCategory_updatedBy")
  from_SubCategory_createdBy             SubCategory[]             @relation("SubCategory_createdBy")
  from_SubSubCategory_updatedBy          SubSubCategory[]          @relation("SubSubCategory_updatedBy")
  from_SubSubCategory_createdBy          SubSubCategory[]          @relation("SubSubCategory_createdBy")
  from_PushNotificationSetting_updatedBy PushNotificationSetting[] @relation("PushNotificationSetting_updatedBy")
  from_PushNotificationSetting_createdBy PushNotificationSetting[] @relation("PushNotificationSetting_createdBy")
  from_Referral_referredUser             Referral[]                @relation("Referral_referredUser")
  from_Referral_updatedBy                Referral[]                @relation("Referral_updatedBy")
  from_Referral_createdBy                Referral[]                @relation("Referral_createdBy")
  from_ContactUs_updatedBy               ContactUs[]               @relation("ContactUs_updatedBy")
  from_ContactUs_createdBy               ContactUs[]               @relation("ContactUs_createdBy")
  from_Message_updatedBy                 Message[]                 @relation("Message_updatedBy")
  from_Message_createdBy                 Message[]                 @relation("Message_createdBy")
  from_Chat_updatedBy                    Chat[]                    @relation("Chat_updatedBy")
  from_Chat_createdBy                    Chat[]                    @relation("Chat_createdBy")
  from_ChatMember_updatedBy              ChatMember[]              @relation("ChatMember_updatedBy")
  from_ChatMember_createdBy              ChatMember[]              @relation("ChatMember_createdBy")
  from_MessageRecipient_user             MessageRecipient[]        @relation("MessageRecipient_user")
  from_MessageRecipient_updatedBy        MessageRecipient[]        @relation("MessageRecipient_updatedBy")
  from_MessageRecipient_createdBy        MessageRecipient[]        @relation("MessageRecipient_createdBy")
  from_JoinRequest_updatedBy             JoinRequest[]             @relation("JoinRequest_updatedBy")
  from_JoinRequest_createdBy             JoinRequest[]             @relation("JoinRequest_createdBy")

  @@index([referralCode])
  @@index([communityId])
  @@index([refererDetailsId])
  @@index([updatedAt])
  @@index([createdAt])
  @@index([updatedById])
  @@index([createdById])
}

model Post {
  id                     String         @id @default(cuid())
  title                  String         @default("")
  group                  Group?         @relation("Post_group", fields: [groupId], references: [id])
  groupId                String?        @map("group")
  likes                  Like[]         @relation("Like_post")
  content                Json           @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  author                 User?          @relation("Post_author", fields: [authorId], references: [id])
  authorId               String?        @map("author")
  tags                   Tag[]          @relation("Post_tags")
  isFlagged              Boolean        @default(false)
  publishedAt            DateTime?
  visibility             String?        @default("public")
  comments               Comment[]      @relation("Comment_post")
  community              Community?     @relation("Post_community", fields: [communityId], references: [id])
  communityId            String?        @map("community")
  updatedAt              DateTime?      @updatedAt
  createdAt              DateTime?      @default(now())
  updatedBy              User?          @relation("Post_updatedBy", fields: [updatedById], references: [id])
  updatedById            String?        @map("updatedBy")
  createdBy              User?          @relation("Post_createdBy", fields: [createdById], references: [id])
  createdById            String?        @map("createdBy")
  from_PostSchedule_post PostSchedule[] @relation("PostSchedule_post")

  @@index([groupId])
  @@index([authorId])
  @@index([communityId])
  @@index([updatedAt])
  @@index([createdAt])
  @@index([updatedById])
  @@index([createdById])
}

model Tag {
  id          String    @id @default(cuid())
  name        String    @default("")
  posts       Post[]    @relation("Post_tags")
  updatedAt   DateTime? @updatedAt
  createdAt   DateTime? @default(now())
  updatedBy   User?     @relation("Tag_updatedBy", fields: [updatedById], references: [id])
  updatedById String?   @map("updatedBy")
  createdBy   User?     @relation("Tag_createdBy", fields: [createdById], references: [id])
  createdById String?   @map("createdBy")

  @@index([updatedAt])
  @@index([createdAt])
  @@index([updatedById])
  @@index([createdById])
}

model Like {
  id          String    @id @default(cuid())
  post        Post?     @relation("Like_post", fields: [postId], references: [id])
  postId      String?   @map("post")
  createdAt   DateTime? @default(now())
  user        User?     @relation("Like_user", fields: [userId], references: [id])
  userId      String?   @map("user")
  updatedAt   DateTime? @updatedAt
  updatedBy   User?     @relation("Like_updatedBy", fields: [updatedById], references: [id])
  updatedById String?   @map("updatedBy")
  createdBy   User?     @relation("Like_createdBy", fields: [createdById], references: [id])
  createdById String?   @map("createdBy")

  @@index([postId])
  @@index([createdAt])
  @@index([userId])
  @@index([updatedAt])
  @@index([updatedById])
  @@index([createdById])
}

model Group {
  id                       String         @id @default(cuid())
  name                     String         @default("")
  visibility               String         @default("public")
  admins                   User[]         @relation("Group_admins")
  members                  GroupMember[]  @relation("GroupMember_group")
  joinRequests             JoinRequest[]  @relation("JoinRequest_group")
  location                 String         @default("")
  category                 Category?      @relation("Group_category", fields: [categoryId], references: [id])
  categoryId               String?        @map("category")
  posts                    Post[]         @relation("Post_group")
  events                   Event[]        @relation("Event_group")
  bannerImage              String         @default("")
  type                     String?        @default("community")
  metadata                 Json?
  isFeatured               String?        @default("no")
  updatedAt                DateTime?      @updatedAt
  createdAt                DateTime?      @default(now())
  updatedBy                User?          @relation("Group_updatedBy", fields: [updatedById], references: [id])
  updatedById              String?        @map("updatedBy")
  createdBy                User?          @relation("Group_createdBy", fields: [createdById], references: [id])
  createdById              String?        @map("createdBy")
  from_PostSchedule_groups PostSchedule[] @relation("PostSchedule_groups")
  from_Survey_group        Survey[]       @relation("Survey_group")

  @@index([categoryId])
  @@index([updatedAt])
  @@index([createdAt])
  @@index([updatedById])
  @@index([createdById])
}

model Notification {
  id          String    @id @default(cuid())
  user        User?     @relation("Notification_user", fields: [userId], references: [id])
  userId      String?   @map("user")
  content     String    @default("")
  type        String?
  sent        Boolean   @default(false)
  expiryDate  DateTime?
  isFlagged   Boolean   @default(false)
  updatedAt   DateTime? @updatedAt
  createdAt   DateTime? @default(now())
  updatedBy   User?     @relation("Notification_updatedBy", fields: [updatedById], references: [id])
  updatedById String?   @map("updatedBy")
  createdBy   User?     @relation("Notification_createdBy", fields: [createdById], references: [id])
  createdById String?   @map("createdBy")

  @@index([userId])
  @@index([updatedAt])
  @@index([createdAt])
  @@index([updatedById])
  @@index([createdById])
}

model Category {
  id             String          @id @default(cuid())
  name           String          @default("")
  subCategory    SubCategory[]   @relation("Category_subCategory")
  groups         Group[]         @relation("Group_category")
  videoResources VideoResource[] @relation("VideoResource_category")
  description    String          @default("")
  image          String          @default("")
  metadata       Json?
  updatedAt      DateTime?       @updatedAt
  createdAt      DateTime?       @default(now())
  updatedBy      User?           @relation("Category_updatedBy", fields: [updatedById], references: [id])
  updatedById    String?         @map("updatedBy")
  createdBy      User?           @relation("Category_createdBy", fields: [createdById], references: [id])
  createdById    String?         @map("createdBy")

  @@index([updatedAt])
  @@index([createdAt])
  @@index([updatedById])
  @@index([createdById])
}

model Event {
  id            String     @id @default(cuid())
  name          String     @default("")
  description   String     @default("")
  location      String     @default("")
  eventDate     DateTime?
  group         Group?     @relation("Event_group", fields: [groupId], references: [id])
  groupId       String?    @map("group")
  bannerImage   String     @default("")
  type          String     @default("")
  acceptedUsers User[]     @relation("Event_acceptedUsers")
  isOnline      Boolean    @default(false)
  community     Community? @relation("Event_community", fields: [communityId], references: [id])
  communityId   String?    @map("community")
  updatedAt     DateTime?  @updatedAt
  createdAt     DateTime?  @default(now())
  updatedBy     User?      @relation("Event_updatedBy", fields: [updatedById], references: [id])
  updatedById   String?    @map("updatedBy")
  createdBy     User?      @relation("Event_createdBy", fields: [createdById], references: [id])
  createdById   String?    @map("createdBy")

  @@index([groupId])
  @@index([communityId])
  @@index([updatedAt])
  @@index([createdAt])
  @@index([updatedById])
  @@index([createdById])
}

model VideoResource {
  id          String    @id @default(cuid())
  title       String    @default("")
  url         String    @default("")
  category    Category? @relation("VideoResource_category", fields: [categoryId], references: [id])
  categoryId  String?   @map("category")
  courses     Course?   @relation("VideoResource_courses", fields: [coursesId], references: [id])
  coursesId   String?   @map("courses")
  image       String    @default("")
  bgColor     String?
  textColor   String?
  updatedAt   DateTime? @updatedAt
  createdAt   DateTime? @default(now())
  updatedBy   User?     @relation("VideoResource_updatedBy", fields: [updatedById], references: [id])
  updatedById String?   @map("updatedBy")
  createdBy   User?     @relation("VideoResource_createdBy", fields: [createdById], references: [id])
  createdById String?   @map("createdBy")

  @@index([categoryId])
  @@index([coursesId])
  @@index([updatedAt])
  @@index([createdAt])
  @@index([updatedById])
  @@index([createdById])
}

model PostSchedule {
  id            String    @id @default(cuid())
  content       String    @default("")
  frequency     String?
  groups        Group[]   @relation("PostSchedule_groups")
  post          Post?     @relation("PostSchedule_post", fields: [postId], references: [id])
  postId        String?   @map("post")
  hashtags      Json?
  scheduledDate DateTime?
  status        String?   @default("pending")
  updatedAt     DateTime? @updatedAt
  createdAt     DateTime? @default(now())
  updatedBy     User?     @relation("PostSchedule_updatedBy", fields: [updatedById], references: [id])
  updatedById   String?   @map("updatedBy")
  createdBy     User?     @relation("PostSchedule_createdBy", fields: [createdById], references: [id])
  createdById   String?   @map("createdBy")

  @@index([postId])
  @@index([updatedAt])
  @@index([createdAt])
  @@index([updatedById])
  @@index([createdById])
}

model QA {
  id          String    @id @default(cuid())
  question    String    @default("")
  user        User?     @relation("QA_user", fields: [userId], references: [id])
  userId      String?   @map("user")
  staff       User?     @relation("QA_staff", fields: [staffId], references: [id])
  staffId     String?   @map("staff")
  answeredAt  DateTime?
  updatedAt   DateTime? @updatedAt
  createdAt   DateTime? @default(now())
  updatedBy   User?     @relation("QA_updatedBy", fields: [updatedById], references: [id])
  updatedById String?   @map("updatedBy")
  createdBy   User?     @relation("QA_createdBy", fields: [createdById], references: [id])
  createdById String?   @map("createdBy")

  @@index([userId])
  @@index([staffId])
  @@index([updatedAt])
  @@index([createdAt])
  @@index([updatedById])
  @@index([createdById])
}

model GroupMember {
  id          String    @id @default(cuid())
  user        User?     @relation("GroupMember_user", fields: [userId], references: [id])
  userId      String?   @map("user")
  group       Group?    @relation("GroupMember_group", fields: [groupId], references: [id])
  groupId     String?   @map("group")
  joinedAt    DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
  createdAt   DateTime? @default(now())
  updatedBy   User?     @relation("GroupMember_updatedBy", fields: [updatedById], references: [id])
  updatedById String?   @map("updatedBy")
  createdBy   User?     @relation("GroupMember_createdBy", fields: [createdById], references: [id])
  createdById String?   @map("createdBy")

  @@index([userId])
  @@index([groupId])
  @@index([updatedAt])
  @@index([createdAt])
  @@index([updatedById])
  @@index([createdById])
}

model Survey {
  id          String    @id @default(cuid())
  question    String    @default("")
  type        String?
  choices     Json?
  group       Group?    @relation("Survey_group", fields: [groupId], references: [id])
  groupId     String?   @map("group")
  closedAt    DateTime?
  updatedAt   DateTime? @updatedAt
  createdAt   DateTime? @default(now())
  updatedBy   User?     @relation("Survey_updatedBy", fields: [updatedById], references: [id])
  updatedById String?   @map("updatedBy")
  createdBy   User?     @relation("Survey_createdBy", fields: [createdById], references: [id])
  createdById String?   @map("createdBy")

  @@index([groupId])
  @@index([updatedAt])
  @@index([createdAt])
  @@index([updatedById])
  @@index([createdById])
}

model Announcement {
  id               String    @id @default(cuid())
  title            String    @default("")
  content          String    @default("")
  expiryDate       DateTime?
  notificationSent Boolean   @default(false)
  image            String    @default("")
  type             String    @default("")
  description      String    @default("")
  updatedAt        DateTime? @updatedAt
  createdAt        DateTime? @default(now())
  updatedBy        User?     @relation("Announcement_updatedBy", fields: [updatedById], references: [id])
  updatedById      String?   @map("updatedBy")
  createdBy        User?     @relation("Announcement_createdBy", fields: [createdById], references: [id])
  createdById      String?   @map("createdBy")

  @@index([updatedAt])
  @@index([createdAt])
  @@index([updatedById])
  @@index([createdById])
}

model PrivacyAndTerm {
  id          String    @id @default(cuid())
  privacy     String    @default("")
  terms       String    @default("")
  updatedAt   DateTime? @updatedAt
  createdAt   DateTime? @default(now())
  updatedBy   User?     @relation("PrivacyAndTerm_updatedBy", fields: [updatedById], references: [id])
  updatedById String?   @map("updatedBy")
  createdBy   User?     @relation("PrivacyAndTerm_createdBy", fields: [createdById], references: [id])
  createdById String?   @map("createdBy")

  @@index([updatedAt])
  @@index([createdAt])
  @@index([updatedById])
  @@index([createdById])
}

model Comment {
  id              String    @id @default(cuid())
  content         String    @default("")
  user            User?     @relation("Comment_user", fields: [userId], references: [id])
  userId          String?   @map("user")
  post            Post?     @relation("Comment_post", fields: [postId], references: [id])
  postId          String?   @map("post")
  isFlagged       Boolean   @default(false)
  parentComment   Comment?  @relation("Comment_parentComment", fields: [parentCommentId], references: [id])
  parentCommentId String?   @map("parentComment")
  replies         Comment[] @relation("Comment_parentComment")
  isEdited        Boolean   @default(false)
  isReported      Boolean   @default(false)
  updatedAt       DateTime? @updatedAt
  createdAt       DateTime? @default(now())
  updatedBy       User?     @relation("Comment_updatedBy", fields: [updatedById], references: [id])
  updatedById     String?   @map("updatedBy")
  createdBy       User?     @relation("Comment_createdBy", fields: [createdById], references: [id])
  createdById     String?   @map("createdBy")

  @@index([userId])
  @@index([postId])
  @@index([parentCommentId])
  @@index([updatedAt])
  @@index([createdAt])
  @@index([updatedById])
  @@index([createdById])
}

model LearningSet {
  id          String    @id @default(cuid())
  title       String    @default("")
  course      Course?   @relation("LearningSet_course", fields: [courseId], references: [id])
  courseId    String?   @map("course")
  image       String    @default("")
  banner      String    @default("")
  bgColor     String?
  textColor   String?
  updatedAt   DateTime? @updatedAt
  createdAt   DateTime? @default(now())
  updatedBy   User?     @relation("LearningSet_updatedBy", fields: [updatedById], references: [id])
  updatedById String?   @map("updatedBy")
  createdBy   User?     @relation("LearningSet_createdBy", fields: [createdById], references: [id])
  createdById String?   @map("createdBy")

  @@index([courseId])
  @@index([updatedAt])
  @@index([createdAt])
  @@index([updatedById])
  @@index([createdById])
}

model Course {
  id             String          @id @default(cuid())
  title          String          @default("")
  description    String          @default("")
  learningSets   LearningSet[]   @relation("LearningSet_course")
  videoResources VideoResource[] @relation("VideoResource_courses")
  lessons        Lesson[]        @relation("Course_lessons")
  enrollments    Enrollment[]    @relation("Enrollment_course")
  status         String?
  updatedAt      DateTime?       @updatedAt
  createdAt      DateTime?       @default(now())
  updatedBy      User?           @relation("Course_updatedBy", fields: [updatedById], references: [id])
  updatedById    String?         @map("updatedBy")
  createdBy      User?           @relation("Course_createdBy", fields: [createdById], references: [id])
  createdById    String?         @map("createdBy")

  @@index([updatedAt])
  @@index([createdAt])
  @@index([updatedById])
  @@index([createdById])
}

model Lesson {
  id          String          @id @default(cuid())
  title       String          @default("")
  contentType String?         @default("video")
  courses     Course[]        @relation("Course_lessons")
  video       String          @default("")
  status      LessonProgress? @relation("Lesson_status", fields: [statusId], references: [id])
  statusId    String?         @unique @map("status")
}

model LessonProgress {
  id           String      @id @default(cuid())
  lesson       Lesson?     @relation("Lesson_status")
  enrollment   Enrollment? @relation("LessonProgress_enrollment", fields: [enrollmentId], references: [id])
  enrollmentId String?     @map("enrollment")
  completed    Boolean     @default(false)
  updatedAt    DateTime?   @updatedAt
  createdAt    DateTime?   @default(now())
  updatedBy    User?       @relation("LessonProgress_updatedBy", fields: [updatedById], references: [id])
  updatedById  String?     @map("updatedBy")
  createdBy    User?       @relation("LessonProgress_createdBy", fields: [createdById], references: [id])
  createdById  String?     @map("createdBy")

  @@index([enrollmentId])
  @@index([updatedAt])
  @@index([createdAt])
  @@index([updatedById])
  @@index([createdById])
}

model Enrollment {
  id             String           @id @default(cuid())
  user           User?            @relation("Enrollment_user", fields: [userId], references: [id])
  userId         String?          @map("user")
  course         Course?          @relation("Enrollment_course", fields: [courseId], references: [id])
  courseId       String?          @map("course")
  enrollmentDate DateTime?        @default(now())
  status         String?          @default("enrolled")
  progress       String?          @default("0")
  lessonProgress LessonProgress[] @relation("LessonProgress_enrollment")
  updatedAt      DateTime?        @updatedAt
  createdAt      DateTime?        @default(now())
  updatedBy      User?            @relation("Enrollment_updatedBy", fields: [updatedById], references: [id])
  updatedById    String?          @map("updatedBy")
  createdBy      User?            @relation("Enrollment_createdBy", fields: [createdById], references: [id])
  createdById    String?          @map("createdBy")

  @@index([userId])
  @@index([courseId])
  @@index([updatedAt])
  @@index([createdAt])
  @@index([updatedById])
  @@index([createdById])
}

model Community {
  id          String  @id @default(cuid())
  name        String  @default("")
  description String  @default("")
  status      String? @default("active")
  events      Event[] @relation("Event_community")
  visibility  String? @default("public")
  bannerImage String  @default("")
  members     User[]  @relation("User_community")
  posts       Post[]  @relation("Post_community")
}

model SubCategory {
  id                        String           @id @default(cuid())
  name                      String           @default("")
  subSubCategory            SubSubCategory[] @relation("SubCategory_subSubCategory")
  description               String           @default("")
  image                     String           @default("")
  metadata                  Json?
  updatedAt                 DateTime?        @updatedAt
  createdAt                 DateTime?        @default(now())
  updatedBy                 User?            @relation("SubCategory_updatedBy", fields: [updatedById], references: [id])
  updatedById               String?          @map("updatedBy")
  createdBy                 User?            @relation("SubCategory_createdBy", fields: [createdById], references: [id])
  createdById               String?          @map("createdBy")
  from_Category_subCategory Category[]       @relation("Category_subCategory")

  @@index([updatedAt])
  @@index([createdAt])
  @@index([updatedById])
  @@index([createdById])
}

model SubSubCategory {
  id                                 String           @id @default(cuid())
  name                               String           @default("")
  sunSubCategory                     SubSubCategory[] @relation("SubSubCategory_sunSubCategory")
  description                        String           @default("")
  image                              String           @default("")
  metadata                           Json?
  updatedAt                          DateTime?        @updatedAt
  createdAt                          DateTime?        @default(now())
  updatedBy                          User?            @relation("SubSubCategory_updatedBy", fields: [updatedById], references: [id])
  updatedById                        String?          @map("updatedBy")
  createdBy                          User?            @relation("SubSubCategory_createdBy", fields: [createdById], references: [id])
  createdById                        String?          @map("createdBy")
  from_SubCategory_subSubCategory    SubCategory[]    @relation("SubCategory_subSubCategory")
  from_SubSubCategory_sunSubCategory SubSubCategory[] @relation("SubSubCategory_sunSubCategory")

  @@index([updatedAt])
  @@index([createdAt])
  @@index([updatedById])
  @@index([createdById])
}

model PushNotificationSetting {
  id                      String    @id @default(cuid())
  enablePushNotifications Boolean   @default(true)
  liveStreams             Boolean   @default(true)
  newMessages             Boolean   @default(true)
  messageRequests         Boolean   @default(true)
  commentsOnPosts         Boolean   @default(true)
  commentsFromPeople      Boolean   @default(true)
  mentions                Boolean   @default(true)
  user                    User?     @relation("PushNotificationSetting_user", fields: [userId], references: [id])
  userId                  String?   @unique @map("user")
  updatedAt               DateTime? @updatedAt
  createdAt               DateTime? @default(now())
  updatedBy               User?     @relation("PushNotificationSetting_updatedBy", fields: [updatedById], references: [id])
  updatedById             String?   @map("updatedBy")
  createdBy               User?     @relation("PushNotificationSetting_createdBy", fields: [createdById], references: [id])
  createdById             String?   @map("createdBy")

  @@index([updatedAt])
  @@index([createdAt])
  @@index([updatedById])
  @@index([createdById])
}

model Referral {
  id             String    @id @default(cuid())
  referredBy     User?     @relation("Referral_referredBy", fields: [referredById], references: [id])
  referredById   String?   @map("referredBy")
  referredUser   User?     @relation("Referral_referredUser", fields: [referredUserId], references: [id])
  referredUserId String?   @map("referredUser")
  status         String?   @default("PENDING")
  updatedAt      DateTime? @updatedAt
  createdAt      DateTime? @default(now())
  updatedBy      User?     @relation("Referral_updatedBy", fields: [updatedById], references: [id])
  updatedById    String?   @map("updatedBy")
  createdBy      User?     @relation("Referral_createdBy", fields: [createdById], references: [id])
  createdById    String?   @map("createdBy")

  @@index([referredById])
  @@index([referredUserId])
  @@index([updatedAt])
  @@index([createdAt])
  @@index([updatedById])
  @@index([createdById])
}

model ContactUs {
  id                  String    @id @default(cuid())
  image               String    @default("")
  phoneNumber         String    @default("")
  email               String    @unique @default("")
  address             String    @default("")
  locationCoordinates Json?
  updatedAt           DateTime? @updatedAt
  createdAt           DateTime? @default(now())
  updatedBy           User?     @relation("ContactUs_updatedBy", fields: [updatedById], references: [id])
  updatedById         String?   @map("updatedBy")
  createdBy           User?     @relation("ContactUs_createdBy", fields: [createdById], references: [id])
  createdById         String?   @map("createdBy")

  @@index([updatedAt])
  @@index([createdAt])
  @@index([updatedById])
  @@index([createdById])
}

model Message {
  id          String             @id @default(cuid())
  content     String             @default("")
  timestamp   DateTime?          @default(now())
  sender      User?              @relation("Message_sender", fields: [senderId], references: [id])
  senderId    String?            @map("sender")
  chat        Chat?              @relation("Message_chat", fields: [chatId], references: [id])
  chatId      String?            @map("chat")
  recipients  MessageRecipient[] @relation("MessageRecipient_message")
  updatedAt   DateTime?          @updatedAt
  createdAt   DateTime?          @default(now())
  updatedBy   User?              @relation("Message_updatedBy", fields: [updatedById], references: [id])
  updatedById String?            @map("updatedBy")
  createdBy   User?              @relation("Message_createdBy", fields: [createdById], references: [id])
  createdById String?            @map("createdBy")

  @@index([senderId])
  @@index([chatId])
  @@index([updatedAt])
  @@index([createdAt])
  @@index([updatedById])
  @@index([createdById])
}

model Chat {
  id          String       @id @default(cuid())
  name        String       @default("")
  chatType    String?      @default("individual")
  members     ChatMember[] @relation("ChatMember_chat")
  messages    Message[]    @relation("Message_chat")
  updatedAt   DateTime?    @updatedAt
  createdAt   DateTime?    @default(now())
  updatedBy   User?        @relation("Chat_updatedBy", fields: [updatedById], references: [id])
  updatedById String?      @map("updatedBy")
  createdBy   User?        @relation("Chat_createdBy", fields: [createdById], references: [id])
  createdById String?      @map("createdBy")

  @@index([updatedAt])
  @@index([createdAt])
  @@index([updatedById])
  @@index([createdById])
}

model ChatMember {
  id          String    @id @default(cuid())
  chat        Chat?     @relation("ChatMember_chat", fields: [chatId], references: [id])
  chatId      String?   @map("chat")
  user        User?     @relation("ChatMember_user", fields: [userId], references: [id])
  userId      String?   @map("user")
  updatedAt   DateTime? @updatedAt
  createdAt   DateTime? @default(now())
  updatedBy   User?     @relation("ChatMember_updatedBy", fields: [updatedById], references: [id])
  updatedById String?   @map("updatedBy")
  createdBy   User?     @relation("ChatMember_createdBy", fields: [createdById], references: [id])
  createdById String?   @map("createdBy")

  @@index([chatId])
  @@index([userId])
  @@index([updatedAt])
  @@index([createdAt])
  @@index([updatedById])
  @@index([createdById])
}

model MessageRecipient {
  id            String    @id @default(cuid())
  message       Message?  @relation("MessageRecipient_message", fields: [messageId], references: [id])
  messageId     String?   @map("message")
  user          User?     @relation("MessageRecipient_user", fields: [userId], references: [id])
  userId        String?   @map("user")
  read          Boolean   @default(false)
  readTimestamp DateTime?
  updatedAt     DateTime? @updatedAt
  createdAt     DateTime? @default(now())
  updatedBy     User?     @relation("MessageRecipient_updatedBy", fields: [updatedById], references: [id])
  updatedById   String?   @map("updatedBy")
  createdBy     User?     @relation("MessageRecipient_createdBy", fields: [createdById], references: [id])
  createdById   String?   @map("createdBy")

  @@index([messageId])
  @@index([userId])
  @@index([updatedAt])
  @@index([createdAt])
  @@index([updatedById])
  @@index([createdById])
}

model JoinRequest {
  id          String    @id @default(cuid())
  user        User?     @relation("JoinRequest_user", fields: [userId], references: [id])
  userId      String?   @map("user")
  group       Group?    @relation("JoinRequest_group", fields: [groupId], references: [id])
  groupId     String?   @map("group")
  status      String?   @default("pending")
  requestedAt DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
  createdAt   DateTime? @default(now())
  updatedBy   User?     @relation("JoinRequest_updatedBy", fields: [updatedById], references: [id])
  updatedById String?   @map("updatedBy")
  createdBy   User?     @relation("JoinRequest_createdBy", fields: [createdById], references: [id])
  createdById String?   @map("createdBy")

  @@index([userId])
  @@index([groupId])
  @@index([updatedAt])
  @@index([createdAt])
  @@index([updatedById])
  @@index([createdById])
}
