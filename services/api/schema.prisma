// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "postgresql"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                            String            @id @default(cuid())
  name                          String            @default("")
  email                         String            @unique @default("")
  phoneNumber                   String            @unique @default("")
  password                      String
  userType                      UserUserTypeType? @default(User)
  bookings                      Booking[]         @relation("Booking_user")
  reviews                       Review[]          @relation("Review_user")
  updatedAt                     DateTime?         @updatedAt
  createdAt                     DateTime?         @default(now())
  updatedBy                     User?             @relation("User_updatedBy", fields: [updatedById], references: [id])
  updatedById                   String?           @map("updatedBy")
  createdBy                     User?             @relation("User_createdBy", fields: [createdById], references: [id])
  createdById                   String?           @map("createdBy")
  from_User_updatedBy           User[]            @relation("User_updatedBy")
  from_User_createdBy           User[]            @relation("User_createdBy")
  from_Room_updatedBy           Room[]            @relation("Room_updatedBy")
  from_Room_createdBy           Room[]            @relation("Room_createdBy")
  from_Booking_updatedBy        Booking[]         @relation("Booking_updatedBy")
  from_Booking_createdBy        Booking[]         @relation("Booking_createdBy")
  from_Payment_updatedBy        Payment[]         @relation("Payment_updatedBy")
  from_Payment_createdBy        Payment[]         @relation("Payment_createdBy")
  from_Review_updatedBy         Review[]          @relation("Review_updatedBy")
  from_Review_createdBy         Review[]          @relation("Review_createdBy")
  from_Slider_updatedBy         Slider[]          @relation("Slider_updatedBy")
  from_Slider_createdBy         Slider[]          @relation("Slider_createdBy")
  from_BreakfastPrice_updatedBy BreakfastPrice[]  @relation("BreakfastPrice_updatedBy")
  from_BreakfastPrice_createdBy BreakfastPrice[]  @relation("BreakfastPrice_createdBy")
  from_DinnerPrice_updatedBy    DinnerPrice[]     @relation("DinnerPrice_updatedBy")
  from_DinnerPrice_createdBy    DinnerPrice[]     @relation("DinnerPrice_createdBy")

  @@index([updatedAt])
  @@index([createdAt])
  @@index([updatedById])
  @@index([createdById])
}

model Room {
  id               String           @id @default(cuid())
  roomType         RoomRoomTypeType @default(Premium)
  roomNumber       String           @default("")
  price            Float
  description      String           @default("")
  isAvailable      Boolean          @default(true)
  bookings         Booking[]        @relation("Booking_room")
  reviews          Review[]         @relation("Review_room")
  images           RoomImage[]      @relation("RoomImage_room")
  breakfastPrice   BreakfastPrice?  @relation("Room_breakfastPrice", fields: [breakfastPriceId], references: [id])
  breakfastPriceId String?          @map("breakfastPrice")
  dinnerPrice      DinnerPrice?     @relation("Room_dinnerPrice", fields: [dinnerPriceId], references: [id])
  dinnerPriceId    String?          @map("dinnerPrice")
  numberOfAdults   Int?
  numberOfChildren Int?
  updatedAt        DateTime?        @updatedAt
  createdAt        DateTime?        @default(now())
  updatedBy        User?            @relation("Room_updatedBy", fields: [updatedById], references: [id])
  updatedById      String?          @map("updatedBy")
  createdBy        User?            @relation("Room_createdBy", fields: [createdById], references: [id])
  createdById      String?          @map("createdBy")

  @@index([breakfastPriceId])
  @@index([dinnerPriceId])
  @@index([updatedAt])
  @@index([createdAt])
  @@index([updatedById])
  @@index([createdById])
}

model Booking {
  id                String                    @id @default(cuid())
  user              User?                     @relation("Booking_user", fields: [userId], references: [id])
  userId            String?                   @map("user")
  bookingNumber     String                    @unique @default("")
  room              Room?                     @relation("Booking_room", fields: [roomId], references: [id])
  roomId            String?                   @map("room")
  checkInDate       DateTime
  checkOutDate      DateTime
  totalPrice        Float
  status            BookingStatusType?        @default(PENDING)
  payment           Payment?                  @relation("Booking_payment", fields: [paymentId], references: [id])
  paymentId         String?                   @unique @map("payment")
  invoice           Invoice?                  @relation("Booking_invoice", fields: [invoiceId], references: [id])
  invoiceId         String?                   @unique @map("invoice")
  paymentStatus     BookingPaymentStatusType? @default(Unpaid)
  primaryUserName   String                    @default("")
  primaryUserAge    Int?
  primaryUserGender String?
  bookingType       String?
  companyName       String                    @default("")
  companyAddress    String                    @default("")
  companyGST        String                    @default("")
  updatedAt         DateTime?                 @updatedAt
  createdAt         DateTime?                 @default(now())
  updatedBy         User?                     @relation("Booking_updatedBy", fields: [updatedById], references: [id])
  updatedById       String?                   @map("updatedBy")
  createdBy         User?                     @relation("Booking_createdBy", fields: [createdById], references: [id])
  createdById       String?                   @map("createdBy")

  @@index([userId])
  @@index([roomId])
  @@index([updatedAt])
  @@index([createdAt])
  @@index([updatedById])
  @@index([createdById])
}

model Payment {
  id            String                   @id @default(cuid())
  booking       Booking?                 @relation("Booking_payment")
  paymentMethod PaymentPaymentMethodType @default(CARD)
  requestId     String                   @default("")
  transactionId String?
  bookingNumber String?
  status        PaymentStatusType        @default(Pending)
  amount        Float
  updatedAt     DateTime?                @updatedAt
  createdAt     DateTime?                @default(now())
  updatedBy     User?                    @relation("Payment_updatedBy", fields: [updatedById], references: [id])
  updatedById   String?                  @map("updatedBy")
  createdBy     User?                    @relation("Payment_createdBy", fields: [createdById], references: [id])
  createdById   String?                  @map("createdBy")

  @@index([requestId])
  @@index([transactionId])
  @@index([bookingNumber])
  @@index([updatedAt])
  @@index([createdAt])
  @@index([updatedById])
  @@index([createdById])
}

model Review {
  id              String    @id @default(cuid())
  user            User?     @relation("Review_user", fields: [userId], references: [id])
  userId          String?   @map("user")
  room            Room?     @relation("Review_room", fields: [roomId], references: [id])
  roomId          String?   @map("room")
  rating          Int
  comment         String    @default("")
  image_id        String?
  image_filesize  Int?
  image_width     Int?
  image_height    Int?
  image_extension String?
  updatedAt       DateTime? @updatedAt
  createdAt       DateTime? @default(now())
  updatedBy       User?     @relation("Review_updatedBy", fields: [updatedById], references: [id])
  updatedById     String?   @map("updatedBy")
  createdBy       User?     @relation("Review_createdBy", fields: [createdById], references: [id])
  createdById     String?   @map("createdBy")

  @@index([userId])
  @@index([roomId])
  @@index([updatedAt])
  @@index([createdAt])
  @@index([updatedById])
  @@index([createdById])
}

model Slider {
  id              String    @id @default(cuid())
  image_id        String?
  image_filesize  Int?
  image_width     Int?
  image_height    Int?
  image_extension String?
  details         String    @default("")
  updatedAt       DateTime? @updatedAt
  createdAt       DateTime? @default(now())
  updatedBy       User?     @relation("Slider_updatedBy", fields: [updatedById], references: [id])
  updatedById     String?   @map("updatedBy")
  createdBy       User?     @relation("Slider_createdBy", fields: [createdById], references: [id])
  createdById     String?   @map("createdBy")

  @@index([updatedAt])
  @@index([createdAt])
  @@index([updatedById])
  @@index([createdById])
}

model RoomImage {
  id              String  @id @default(cuid())
  image_id        String?
  image_filesize  Int?
  image_width     Int?
  image_height    Int?
  image_extension String?
  description     String  @default("")
  room            Room?   @relation("RoomImage_room", fields: [roomId], references: [id])
  roomId          String? @map("room")

  @@index([roomId])
}

model Faq {
  id       String @id @default(cuid())
  question String @default("")
  answer   String @default("")
}

model Invoice {
  id            String   @id @default(cuid())
  booking       Booking? @relation("Booking_invoice")
  invoiceNumber String   @unique @default("")
  amount        Float
  taxDetails    String   @default("")
}

model BreakfastPrice {
  id          String    @id @default(cuid())
  rooms       Room[]    @relation("Room_breakfastPrice")
  price       Float
  updatedAt   DateTime? @updatedAt
  createdAt   DateTime? @default(now())
  updatedBy   User?     @relation("BreakfastPrice_updatedBy", fields: [updatedById], references: [id])
  updatedById String?   @map("updatedBy")
  createdBy   User?     @relation("BreakfastPrice_createdBy", fields: [createdById], references: [id])
  createdById String?   @map("createdBy")

  @@index([updatedAt])
  @@index([createdAt])
  @@index([updatedById])
  @@index([createdById])
}

model DinnerPrice {
  id          String    @id @default(cuid())
  rooms       Room[]    @relation("Room_dinnerPrice")
  price       Float
  updatedAt   DateTime? @updatedAt
  createdAt   DateTime? @default(now())
  updatedBy   User?     @relation("DinnerPrice_updatedBy", fields: [updatedById], references: [id])
  updatedById String?   @map("updatedBy")
  createdBy   User?     @relation("DinnerPrice_createdBy", fields: [createdById], references: [id])
  createdById String?   @map("createdBy")

  @@index([updatedAt])
  @@index([createdAt])
  @@index([updatedById])
  @@index([createdById])
}

model ReportList {
  id   String  @id @default(cuid())
  type String?
  data Json?
}

model Coupon {
  id             String    @id @default(cuid())
  code           String    @unique @default("")
  type           String?
  value          Float
  isUsed         Boolean   @default(false)
  expirationDate DateTime?
}

enum UserUserTypeType {
  User
  Admin
}

enum RoomRoomTypeType {
  Deluxe
  Premium
}

enum BookingStatusType {
  PENDING
  CONFIRMED
  CANCELLED
}

enum BookingPaymentStatusType {
  Paid
  Unpaid
}

enum PaymentPaymentMethodType {
  CARD
  UPI
  NET_BANKING
}

enum PaymentStatusType {
  Success
  Failed
  Pending
}
