// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "postgresql"
}

generator client {
  provider = "prisma-client-js"
  output   = "node_modules/.prisma/client"
}

model User {
  id                                String               @id @default(cuid())
  name                              String               @default("")
  email                             String               @unique @default("")
  phoneNumber                       String               @default("")
  password                          String
  userType                          UserUserTypeType?    @default(user)
  bookings                          Booking[]            @relation("Booking_user")
  reviews                           Review[]             @relation("Review_user")
  otps                              Otp[]                @relation("Otp_user")
  updatedAt                         DateTime?            @updatedAt
  createdAt                         DateTime?            @default(now())
  updatedBy                         User?                @relation("User_updatedBy", fields: [updatedById], references: [id])
  updatedById                       String?              @map("updatedBy")
  createdBy                         User?                @relation("User_createdBy", fields: [createdById], references: [id])
  createdById                       String?              @map("createdBy")
  from_User_updatedBy               User[]               @relation("User_updatedBy")
  from_User_createdBy               User[]               @relation("User_createdBy")
  from_Room_updatedBy               Room[]               @relation("Room_updatedBy")
  from_Room_createdBy               Room[]               @relation("Room_createdBy")
  from_RoomType_updatedBy           RoomType[]           @relation("RoomType_updatedBy")
  from_RoomType_createdBy           RoomType[]           @relation("RoomType_createdBy")
  from_Booking_updatedBy            Booking[]            @relation("Booking_updatedBy")
  from_Booking_createdBy            Booking[]            @relation("Booking_createdBy")
  from_Payment_user                 Payment[]            @relation("Payment_user")
  from_Payment_updatedBy            Payment[]            @relation("Payment_updatedBy")
  from_Payment_createdBy            Payment[]            @relation("Payment_createdBy")
  from_Review_updatedBy             Review[]             @relation("Review_updatedBy")
  from_Review_createdBy             Review[]             @relation("Review_createdBy")
  from_Slider_updatedBy             Slider[]             @relation("Slider_updatedBy")
  from_Slider_createdBy             Slider[]             @relation("Slider_createdBy")
  from_RoomImage_updatedBy          RoomImage[]          @relation("RoomImage_updatedBy")
  from_RoomImage_createdBy          RoomImage[]          @relation("RoomImage_createdBy")
  from_Faq_updatedBy                Faq[]                @relation("Faq_updatedBy")
  from_Faq_createdBy                Faq[]                @relation("Faq_createdBy")
  from_Invoice_updatedBy            Invoice[]            @relation("Invoice_updatedBy")
  from_Invoice_createdBy            Invoice[]            @relation("Invoice_createdBy")
  from_BreakfastPrice_updatedBy     BreakfastPrice[]     @relation("BreakfastPrice_updatedBy")
  from_BreakfastPrice_createdBy     BreakfastPrice[]     @relation("BreakfastPrice_createdBy")
  from_DinnerPrice_updatedBy        DinnerPrice[]        @relation("DinnerPrice_updatedBy")
  from_DinnerPrice_createdBy        DinnerPrice[]        @relation("DinnerPrice_createdBy")
  from_ReportList_updatedBy         ReportList[]         @relation("ReportList_updatedBy")
  from_ReportList_createdBy         ReportList[]         @relation("ReportList_createdBy")
  from_Coupon_updatedBy             Coupon[]             @relation("Coupon_updatedBy")
  from_Coupon_createdBy             Coupon[]             @relation("Coupon_createdBy")
  from_BookingPrimaryUser_updatedBy BookingPrimaryUser[] @relation("BookingPrimaryUser_updatedBy")
  from_BookingPrimaryUser_createdBy BookingPrimaryUser[] @relation("BookingPrimaryUser_createdBy")
  from_Otp_updatedBy                Otp[]                @relation("Otp_updatedBy")
  from_Otp_createdBy                Otp[]                @relation("Otp_createdBy")
  from_State_updatedBy              State[]              @relation("State_updatedBy")
  from_State_createdBy              State[]              @relation("State_createdBy")
  from_Country_updatedBy            Country[]            @relation("Country_updatedBy")
  from_Country_createdBy            Country[]            @relation("Country_createdBy")

  @@index([updatedAt])
  @@index([createdAt])
  @@index([updatedById])
  @@index([createdById])
}

model Room {
  id          String    @id @default(cuid())
  roomType    RoomType? @relation("Room_roomType", fields: [roomTypeId], references: [id])
  roomTypeId  String?   @map("roomType")
  roomNumber  String    @default("")
  isAvailable Boolean   @default(true)
  bookings    Booking[] @relation("Booking_rooms")
  updatedAt   DateTime? @updatedAt
  createdAt   DateTime? @default(now())
  updatedBy   User?     @relation("Room_updatedBy", fields: [updatedById], references: [id])
  updatedById String?   @map("updatedBy")
  createdBy   User?     @relation("Room_createdBy", fields: [createdById], references: [id])
  createdById String?   @map("createdBy")

  @@index([roomTypeId])
  @@index([updatedAt])
  @@index([createdAt])
  @@index([updatedById])
  @@index([createdById])
}

model RoomType {
  id               String          @id @default(cuid())
  name             String          @default("")
  actualPrice      Float
  offerPrice       Float
  description      String          @default("")
  reviews          Review[]        @relation("Review_roomType")
  images           RoomImage[]     @relation("RoomImage_room")
  rooms            Room[]          @relation("Room_roomType")
  breakfastPrice   BreakfastPrice? @relation("RoomType_breakfastPrice", fields: [breakfastPriceId], references: [id])
  breakfastPriceId String?         @map("breakfastPrice")
  dinnerPrice      DinnerPrice?    @relation("RoomType_dinnerPrice", fields: [dinnerPriceId], references: [id])
  dinnerPriceId    String?         @map("dinnerPrice")
  numberOfAdults   Int?
  numberOfChildren Int?
  updatedAt        DateTime?       @updatedAt
  createdAt        DateTime?       @default(now())
  updatedBy        User?           @relation("RoomType_updatedBy", fields: [updatedById], references: [id])
  updatedById      String?         @map("updatedBy")
  createdBy        User?           @relation("RoomType_createdBy", fields: [createdById], references: [id])
  createdById      String?         @map("createdBy")

  @@index([breakfastPriceId])
  @@index([dinnerPriceId])
  @@index([updatedAt])
  @@index([createdAt])
  @@index([updatedById])
  @@index([createdById])
}

model Booking {
  id                   String              @id @default(cuid())
  user                 User?               @relation("Booking_user", fields: [userId], references: [id])
  userId               String?             @map("user")
  bookingNumber        String              @default("")
  rooms                Room[]              @relation("Booking_rooms")
  checkInDate          DateTime
  checkOutDate         DateTime
  totalPriceWithoutTax Float
  totalPrice           Float
  status               String?             @default("pending")
  payment              Payment?            @relation("Booking_payment", fields: [paymentId], references: [id])
  paymentId            String?             @unique @map("payment")
  invoice              Invoice?            @relation("Booking_invoice", fields: [invoiceId], references: [id])
  invoiceId            String?             @unique @map("invoice")
  paymentStatus        String?             @default("Unpaid")
  bookingType          String?
  primaryUser          BookingPrimaryUser? @relation("Booking_primaryUser", fields: [primaryUserId], references: [id])
  primaryUserId        String?             @unique @map("primaryUser")
  updatedAt            DateTime?           @updatedAt
  createdAt            DateTime?           @default(now())
  updatedBy            User?               @relation("Booking_updatedBy", fields: [updatedById], references: [id])
  updatedById          String?             @map("updatedBy")
  createdBy            User?               @relation("Booking_createdBy", fields: [createdById], references: [id])
  createdById          String?             @map("createdBy")

  @@index([userId])
  @@index([updatedAt])
  @@index([createdAt])
  @@index([updatedById])
  @@index([createdById])
}

model Payment {
  id            String    @id @default(cuid())
  booking       Booking?  @relation("Booking_payment")
  paymentMethod String    @default("razorpay")
  requestId     String    @default("")
  transactionId String?
  bookingNumber String?
  status        String    @default("initiated")
  amount        Float
  currency      String?   @default("INR")
  response      Json?
  user          User?     @relation("Payment_user", fields: [userId], references: [id])
  userId        String?   @map("user")
  updatedAt     DateTime? @updatedAt
  createdAt     DateTime? @default(now())
  updatedBy     User?     @relation("Payment_updatedBy", fields: [updatedById], references: [id])
  updatedById   String?   @map("updatedBy")
  createdBy     User?     @relation("Payment_createdBy", fields: [createdById], references: [id])
  createdById   String?   @map("createdBy")

  @@index([requestId])
  @@index([transactionId])
  @@index([bookingNumber])
  @@index([userId])
  @@index([updatedAt])
  @@index([createdAt])
  @@index([updatedById])
  @@index([createdById])
}

model Review {
  id              String    @id @default(cuid())
  user            User?     @relation("Review_user", fields: [userId], references: [id])
  userId          String?   @map("user")
  roomType        RoomType? @relation("Review_roomType", fields: [roomTypeId], references: [id])
  roomTypeId      String?   @map("roomType")
  rating          Int
  comment         String    @default("")
  image_id        String?
  image_filesize  Int?
  image_width     Int?
  image_height    Int?
  image_extension String?
  updatedAt       DateTime? @updatedAt
  createdAt       DateTime? @default(now())
  updatedBy       User?     @relation("Review_updatedBy", fields: [updatedById], references: [id])
  updatedById     String?   @map("updatedBy")
  createdBy       User?     @relation("Review_createdBy", fields: [createdById], references: [id])
  createdById     String?   @map("createdBy")

  @@index([userId])
  @@index([roomTypeId])
  @@index([updatedAt])
  @@index([createdAt])
  @@index([updatedById])
  @@index([createdById])
}

model Slider {
  id              String    @id @default(cuid())
  image_id        String?
  image_filesize  Int?
  image_width     Int?
  image_height    Int?
  image_extension String?
  details         String    @default("")
  updatedAt       DateTime? @updatedAt
  createdAt       DateTime? @default(now())
  updatedBy       User?     @relation("Slider_updatedBy", fields: [updatedById], references: [id])
  updatedById     String?   @map("updatedBy")
  createdBy       User?     @relation("Slider_createdBy", fields: [createdById], references: [id])
  createdById     String?   @map("createdBy")

  @@index([updatedAt])
  @@index([createdAt])
  @@index([updatedById])
  @@index([createdById])
}

model RoomImage {
  id              String    @id @default(cuid())
  image_id        String?
  image_filesize  Int?
  image_width     Int?
  image_height    Int?
  image_extension String?
  description     String    @default("")
  room            RoomType? @relation("RoomImage_room", fields: [roomId], references: [id])
  roomId          String?   @map("room")
  updatedAt       DateTime? @updatedAt
  createdAt       DateTime? @default(now())
  updatedBy       User?     @relation("RoomImage_updatedBy", fields: [updatedById], references: [id])
  updatedById     String?   @map("updatedBy")
  createdBy       User?     @relation("RoomImage_createdBy", fields: [createdById], references: [id])
  createdById     String?   @map("createdBy")

  @@index([roomId])
  @@index([updatedAt])
  @@index([createdAt])
  @@index([updatedById])
  @@index([createdById])
}

model Faq {
  id          String    @id @default(cuid())
  question    String    @default("")
  answer      String    @default("")
  updatedAt   DateTime? @updatedAt
  createdAt   DateTime? @default(now())
  updatedBy   User?     @relation("Faq_updatedBy", fields: [updatedById], references: [id])
  updatedById String?   @map("updatedBy")
  createdBy   User?     @relation("Faq_createdBy", fields: [createdById], references: [id])
  createdById String?   @map("createdBy")

  @@index([updatedAt])
  @@index([createdAt])
  @@index([updatedById])
  @@index([createdById])
}

model Invoice {
  id            String    @id @default(cuid())
  booking       Booking?  @relation("Booking_invoice")
  invoiceNumber String    @unique @default("")
  amount        Float
  taxDetails    String    @default("")
  updatedAt     DateTime? @updatedAt
  createdAt     DateTime? @default(now())
  updatedBy     User?     @relation("Invoice_updatedBy", fields: [updatedById], references: [id])
  updatedById   String?   @map("updatedBy")
  createdBy     User?     @relation("Invoice_createdBy", fields: [createdById], references: [id])
  createdById   String?   @map("createdBy")

  @@index([updatedAt])
  @@index([createdAt])
  @@index([updatedById])
  @@index([createdById])
}

model BreakfastPrice {
  id          String     @id @default(cuid())
  rooms       RoomType[] @relation("RoomType_breakfastPrice")
  price       Float
  updatedAt   DateTime?  @updatedAt
  createdAt   DateTime?  @default(now())
  updatedBy   User?      @relation("BreakfastPrice_updatedBy", fields: [updatedById], references: [id])
  updatedById String?    @map("updatedBy")
  createdBy   User?      @relation("BreakfastPrice_createdBy", fields: [createdById], references: [id])
  createdById String?    @map("createdBy")

  @@index([updatedAt])
  @@index([createdAt])
  @@index([updatedById])
  @@index([createdById])
}

model DinnerPrice {
  id          String     @id @default(cuid())
  rooms       RoomType[] @relation("RoomType_dinnerPrice")
  price       Float
  updatedAt   DateTime?  @updatedAt
  createdAt   DateTime?  @default(now())
  updatedBy   User?      @relation("DinnerPrice_updatedBy", fields: [updatedById], references: [id])
  updatedById String?    @map("updatedBy")
  createdBy   User?      @relation("DinnerPrice_createdBy", fields: [createdById], references: [id])
  createdById String?    @map("createdBy")

  @@index([updatedAt])
  @@index([createdAt])
  @@index([updatedById])
  @@index([createdById])
}

model ReportList {
  id          String    @id @default(cuid())
  type        String?
  data        Json?
  updatedAt   DateTime? @updatedAt
  createdAt   DateTime? @default(now())
  updatedBy   User?     @relation("ReportList_updatedBy", fields: [updatedById], references: [id])
  updatedById String?   @map("updatedBy")
  createdBy   User?     @relation("ReportList_createdBy", fields: [createdById], references: [id])
  createdById String?   @map("createdBy")

  @@index([updatedAt])
  @@index([createdAt])
  @@index([updatedById])
  @@index([createdById])
}

model Coupon {
  id             String    @id @default(cuid())
  code           String    @unique @default("")
  type           String?
  value          Float
  isUsed         Boolean   @default(false)
  expirationDate DateTime?
  updatedAt      DateTime? @updatedAt
  createdAt      DateTime? @default(now())
  updatedBy      User?     @relation("Coupon_updatedBy", fields: [updatedById], references: [id])
  updatedById    String?   @map("updatedBy")
  createdBy      User?     @relation("Coupon_createdBy", fields: [createdById], references: [id])
  createdById    String?   @map("createdBy")

  @@index([updatedAt])
  @@index([createdAt])
  @@index([updatedById])
  @@index([createdById])
}

model BookingPrimaryUser {
  id                 String    @id @default(cuid())
  name               String    @default("")
  age                Int?
  gender             String?
  verificationIdType String?
  verificationId     String    @default("")
  bookingType        String?
  countries          Country?  @relation("BookingPrimaryUser_countries", fields: [countriesId], references: [id])
  countriesId        String?   @map("countries")
  state              String    @default("")
  indianState        State?    @relation("BookingPrimaryUser_indianState", fields: [indianStateId], references: [id])
  indianStateId      String?   @map("indianState")
  streetAddress      String    @default("")
  addressLine2       String    @default("")
  city               String    @default("")
  postalCode         String    @default("")
  companyName        String    @default("")
  gstNumber          String    @default("")
  booking            Booking?  @relation("Booking_primaryUser")
  updatedAt          DateTime? @updatedAt
  createdAt          DateTime? @default(now())
  updatedBy          User?     @relation("BookingPrimaryUser_updatedBy", fields: [updatedById], references: [id])
  updatedById        String?   @map("updatedBy")
  createdBy          User?     @relation("BookingPrimaryUser_createdBy", fields: [createdById], references: [id])
  createdById        String?   @map("createdBy")

  @@index([countriesId])
  @@index([indianStateId])
  @@index([updatedAt])
  @@index([createdAt])
  @@index([updatedById])
  @@index([createdById])
}

model Otp {
  id          String    @id @default(cuid())
  otp         String    @default("")
  user        User?     @relation("Otp_user", fields: [userId], references: [id])
  userId      String?   @map("user")
  updatedAt   DateTime? @updatedAt
  createdAt   DateTime? @default(now())
  updatedBy   User?     @relation("Otp_updatedBy", fields: [updatedById], references: [id])
  updatedById String?   @map("updatedBy")
  createdBy   User?     @relation("Otp_createdBy", fields: [createdById], references: [id])
  createdById String?   @map("createdBy")

  @@index([userId])
  @@index([updatedAt])
  @@index([createdAt])
  @@index([updatedById])
  @@index([createdById])
}

model State {
  id                                  String               @id @default(cuid())
  name                                String               @default("")
  stateCode                           Int?
  updatedAt                           DateTime?            @updatedAt
  createdAt                           DateTime?            @default(now())
  updatedBy                           User?                @relation("State_updatedBy", fields: [updatedById], references: [id])
  updatedById                         String?              @map("updatedBy")
  createdBy                           User?                @relation("State_createdBy", fields: [createdById], references: [id])
  createdById                         String?              @map("createdBy")
  from_BookingPrimaryUser_indianState BookingPrimaryUser[] @relation("BookingPrimaryUser_indianState")

  @@index([updatedAt])
  @@index([createdAt])
  @@index([updatedById])
  @@index([createdById])
}

model Country {
  id                                String               @id @default(cuid())
  name                              String               @default("")
  code                              String               @default("")
  updatedAt                         DateTime?            @updatedAt
  createdAt                         DateTime?            @default(now())
  updatedBy                         User?                @relation("Country_updatedBy", fields: [updatedById], references: [id])
  updatedById                       String?              @map("updatedBy")
  createdBy                         User?                @relation("Country_createdBy", fields: [createdById], references: [id])
  createdById                       String?              @map("createdBy")
  from_BookingPrimaryUser_countries BookingPrimaryUser[] @relation("BookingPrimaryUser_countries")

  @@index([updatedAt])
  @@index([createdAt])
  @@index([updatedById])
  @@index([createdById])
}

enum UserUserTypeType {
  user
  admin
}
